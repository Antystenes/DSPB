
==================== FINAL INTERFACE ====================
2017-04-02 00:13:50.598327492 UTC

interface DSPB-0.1.0.0-IzuWE0A9uXqKGPPquzCxk7:Lib 8002
  interface hash: 3a102f47f929195bc06d7c4c36c6318e
  ABI hash: 419266fbf049167eb54cfdbb6a3a2d7a
  export-list hash: f2142a0ed29a605576b30615570e8c55
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: c31e31a2316a7b8e52f7ab3c56de92da
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.appendToLine
  Lib.changeCent
  Lib.changeMid
  Lib.conwayUpdate
  Lib.counts
  Lib.emptyNLine
  Lib.gridConfigurations
  Lib.height
  Lib.horizNeighb
  Lib.horizontalConfigurations
  Lib.limap
  Lib.lowerNeighb
  Lib.mooresNeighb
  Lib.moveDownGrid
  Lib.moveLeftGrid
  Lib.moveLeftLine
  Lib.moveRightGrid
  Lib.moveRightLine
  Lib.moveUpGrid
  Lib.sampleGrid
  Lib.sampleLine
  Lib.sampleNGrid
  Lib.sampleNLine
  Lib.simulationGOF
  Lib.simulationN
  Lib.someFunc
  Lib.upperNeighb
  Lib.width
  Lib.Cell{Lib.Alive Lib.Dead}
  Lib.Direction{Lib.Down Lib.Left Lib.Right Lib.Up}
  Lib.Drawable{Lib.draw}
  Lib.Grid{Lib.Grid _down _mid _up}
  Lib.Line{Lib.Line _center _left _right}
  Lib.Nucleobase{Lib.A Lib.C Lib.G Lib.U}
  Lib.Nucleotide{Lib.Nucleotide _base _bond3 _bond5 _hbond}
module dependencies:
package dependencies: GLURaw-2.0.0.3@GLURaw-2.0.0.3-G12M6COyQIU5WfRlrIwPuj
                      GLUT-2.7.0.11@GLUT-2.7.0.11-IP0PzJz4wI8KYXyKTnttpl
                      ObjectName-1.1.0.1@ObjectName-1.1.0.1-EiFOWjUQWWuLyOhtrmuIWX
                      OpenGL-3.0.1.0@OpenGL-3.0.1.0-BckrJgI63aX3I0VRJxU6fY
                      OpenGLRaw-3.2.4.0@OpenGLRaw-3.2.4.0-JDyGgOXR61GG549SwmWm2Q
                      StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      adjunctions-4.3@adjunctions-4.3-7bX590WM0JqI4H9GMcNEBq
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-orphans-0.5.4@base-orphans-0.5.4-ABoxiBf7nXc7Qqh66CgYc9
                      bifunctors-5.4.1@bifunctors-5.4.1-LZeQTL0Uaws6v2aJY5STuc
                      binary-0.8.3.0@binary-0.8.3.0
                      bmp-1.2.6.3@bmp-1.2.6.3-43OLkH0uuwm831pBFpx2PZ
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      comonad-5@comonad-5-BYydH82fZIS1vK4HJ9v9HH
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-3UCY3arLvoG71jrGOYoc39
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.2@distributive-0.5.2-JCgfTXNR3ywAyV7fFWIBI5
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      fixed-0.2.1.1@fixed-0.2.1.1-8Jr82l0kss5Gr4nEevmXlZ
                      free-4.12.4@free-4.12.4-C89MffdE5zK8lCuYhh5BJR
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      gloss-1.10.2.5@gloss-1.10.2.5-Cjq2LIsB60XBDXiLGr6ISz
                      gloss-rendering-1.10.3.5@gloss-rendering-1.10.3.5-4njwxhM0L51DDTj3f5QCty
                      half-0.2.2.3@half-0.2.2.3-GHJ372Ls7FBA3PAGtGHfOR
                      hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x
                      integer-gmp-1.0.0.1
                      kan-extensions-5.0.1@kan-extensions-5.0.1-GfRgigRS3IhJiXd1UYYFjj
                      lens-4.15.1@lens-4.15.1-2bPnjHpJoHy2zLogJCwNGD
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-BhL9U5k7NtGJn1itwIHt2Y
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      profunctors-5.2@profunctors-5.2-E83rhkBRsJE8oBXYAZAqjZ
                      reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4
                      semigroupoids-5.1@semigroupoids-5.1-IViIK2AEZZs10fiaW8ySWi
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         gloss-rendering-1.10.3.5@gloss-rendering-1.10.3.5-4njwxhM0L51DDTj3f5QCty:Graphics.Gloss.Internals.Data.Picture
         hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x:Data.Hashable.Generic
         reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4:Data.Reflection
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjunctions-4.3-7bX590WM0JqI4H9GMcNEBq:Data.Functor.Rep
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         bifunctors-5.4.1@bifunctors-5.4.1-LZeQTL0Uaws6v2aJY5STuc:Data.Bifunctor.Biff
                         bifunctors-5.4.1@bifunctors-5.4.1-LZeQTL0Uaws6v2aJY5STuc:Data.Bifunctor.Clown
                         bifunctors-5.4.1@bifunctors-5.4.1-LZeQTL0Uaws6v2aJY5STuc:Data.Bifunctor.Flip
                         bifunctors-5.4.1@bifunctors-5.4.1-LZeQTL0Uaws6v2aJY5STuc:Data.Bifunctor.Join
                         bifunctors-5.4.1@bifunctors-5.4.1-LZeQTL0Uaws6v2aJY5STuc:Data.Bifunctor.Joker
                         bifunctors-5.4.1@bifunctors-5.4.1-LZeQTL0Uaws6v2aJY5STuc:Data.Bifunctor.Product
                         bifunctors-5.4.1@bifunctors-5.4.1-LZeQTL0Uaws6v2aJY5STuc:Data.Bifunctor.Sum
                         bifunctors-5.4.1@bifunctors-5.4.1-LZeQTL0Uaws6v2aJY5STuc:Data.Bifunctor.Tannen
                         bifunctors-5.4.1@bifunctors-5.4.1-LZeQTL0Uaws6v2aJY5STuc:Data.Bifunctor.Wrapped
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.0.1@kan-extensions-5.0.1-GfRgigRS3IhJiXd1UYYFjj:Data.Functor.Day
                         kan-extensions-5.0.1@kan-extensions-5.0.1-GfRgigRS3IhJiXd1UYYFjj:Data.Functor.Yoneda
                         lens-4.15.1@lens-4.15.1-2bPnjHpJoHy2zLogJCwNGD:Control.Lens.At
                         lens-4.15.1@lens-4.15.1-2bPnjHpJoHy2zLogJCwNGD:Control.Lens.Internal.Indexed
                         lens-4.15.1@lens-4.15.1-2bPnjHpJoHy2zLogJCwNGD:Control.Lens.Reified
                         lens-4.15.1@lens-4.15.1-2bPnjHpJoHy2zLogJCwNGD:Control.Lens.Tuple
                         lens-4.15.1@lens-4.15.1-2bPnjHpJoHy2zLogJCwNGD:Control.Lens.Wrapped
                         lens-4.15.1@lens-4.15.1-2bPnjHpJoHy2zLogJCwNGD:Control.Lens.Zoom
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         profunctors-5.2@profunctors-5.2-E83rhkBRsJE8oBXYAZAqjZ:Data.Profunctor.Rep
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashSet
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Function 7aca86bfbd92366def5f260e30cb2628
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  comonad-5@comonad-5-BYydH82fZIS1vK4HJ9v9HH:Control.Comonad 78c4a5a8d1fa2773796a85c577c3c580
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  gloss-1.10.2.5@gloss-1.10.2.5-Cjq2LIsB60XBDXiLGr6ISz:Graphics.Gloss 446fba84c72c2162e0e53dbea5b10a12
import  -/  gloss-1.10.2.5@gloss-1.10.2.5-Cjq2LIsB60XBDXiLGr6ISz:Graphics.Gloss.Data.Color 35f09dcf5824a501e40cfcf03326b2bc
import  -/  gloss-1.10.2.5@gloss-1.10.2.5-Cjq2LIsB60XBDXiLGr6ISz:Graphics.Gloss.Data.Display 5392242cf7ec93ea58fa9cb1cc259a3f
import  -/  gloss-1.10.2.5@gloss-1.10.2.5-Cjq2LIsB60XBDXiLGr6ISz:Graphics.Gloss.Data.Picture 32f91608a8bdee9c0064dc93458da74d
import  -/  gloss-1.10.2.5@gloss-1.10.2.5-Cjq2LIsB60XBDXiLGr6ISz:Graphics.Gloss.Interface.Pure.Simulate 7d85c20229e42520b9adab85f50d5f7a
import  -/  gloss-rendering-1.10.3.5@gloss-rendering-1.10.3.5-4njwxhM0L51DDTj3f5QCty:Graphics.Gloss.Internals.Data.Picture ec8d0a362f39091fe9e13deed4330688
import  -/  lens-4.15.1@lens-4.15.1-2bPnjHpJoHy2zLogJCwNGD:Control.Lens 119ffa0654492e3f1025b64be63262f4
2988a1eaac9fe8aa29b908b484e2b72d
  $fComonadGrid :: Control.Comonad.Comonad Lib.Grid
  DFunId
  {- HasNoCafRefs, Strictness: m,
     Unfolding: DFun:.
                  @ Lib.Grid
                  Lib.$fFunctorGrid
                  Lib.$fComonadGrid_$cextract
                  Lib.gridConfigurations
                  Lib.$fComonadGrid1 -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fComonadGrid1 :: (Lib.Grid a -> b) -> Lib.Grid a -> Lib.Grid b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U><S(SS(SLS)S),1*U(U,U(U,U,U),U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (eta :: Lib.Grid a -> b) (x2 :: Lib.Grid a) ->
                 Lib.$fComonadGrid_$cfmap
                   @ (Lib.Grid a)
                   @ b
                   eta
                   (Lib.gridConfigurations @ a x2)) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fComonadGrid_$cextract :: Lib.Grid a -> a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LS(LSL)L),1*U(A,U(A,U,A),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds2 :: Lib.Grid a) ->
                 case ds2 of wild { Lib.Grid ds3 ds4 ds5 ->
                 case ds4 of wild1 { Lib.Line ds6 x2 ds7 -> x2 } }) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fComonadGrid_$cfmap :: (a -> b) -> Lib.Grid a -> Lib.Grid b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U><S(SS(SSS)S),1*U(U,U(U,U,U),U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (w :: a -> b) (w1 :: Lib.Grid a) ->
                 case w1 of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 case Lib.$w$cfmap
                        @ a
                        @ b
                        w
                        ww1
                        ww5
                        ww6
                        ww7
                        ww3 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 Lib.Grid @ b ww9 ww10 ww11 } } }) -}
0807525a993b96a25d6470cd5bcc6919
  $fDrawableCell :: Lib.Drawable Lib.Cell
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, False, True)
                Lib.$fDrawableCell_$cdraw
                  `cast`
                (Sym (Lib.N:Drawable[0] <Lib.Cell>_N)) -}
3de49ed3637e94ed93b75f88a8bc810e
  $fDrawableCell1 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- HasNoCafRefs, Strictness: m14,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Pictures
                   (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture)) -}
6bf7f334d82e896f12cfcbaafef3fdc5
  $fDrawableCell2 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- HasNoCafRefs, Strictness: m10,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Color
                   Graphics.Gloss.Data.Color.blue
                   Lib.$fDrawableCell3) -}
1cb4474f00135dad761663e2c4e554ec
  $fDrawableCell3 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- HasNoCafRefs, Strictness: m5,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.ThickCircle
                   Lib.$fDrawableCell4
                   Lib.$fDrawableCell_r) -}
09cf8020d5542efc07ce04e01e0c2feb
  $fDrawableCell4 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 2.5#) -}
2774eebdfecbac330a2c0ac6527ee78f
  $fDrawableCell_$cdraw ::
    Lib.Cell -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds2 :: Lib.Cell) ->
                 case ds2 of wild {
                   Lib.Alive -> Lib.$fDrawableCell2
                   Lib.Dead -> Lib.$fDrawableCell1 }) -}
73b5e4920b23ca47b4e6dd68f96bd61b
  $fDrawableCell_r :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 5.0#) -}
0807525a993b96a25d6470cd5bcc6919
  $fDrawableGrid :: Lib.Drawable a => Lib.Drawable (Lib.Grid a)
  DFunId
  {- Arity: 2, Strictness: <L,C(U)><S(SSS),1*U(U,U(U,U,U),U)>m14,
     Unfolding: InlineRule (0, False, True)
                Lib.$fDrawableGrid1
                  `cast`
                (forall (a :: <*>_N).
                 <Lib.Drawable a>_R ->_R Sym (Lib.N:Drawable[0] <Lib.Grid a>_N)) -}
0807525a993b96a25d6470cd5bcc6919
  $fDrawableGrid1 ::
    Lib.Drawable a =>
    Lib.Grid a -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 2, Strictness: <L,C(U)><S(SSS),1*U(U,U(U,U,U),U)>m14,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: Lib.Drawable a) (w1 :: Lib.Grid a) ->
                 case w1 of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 case Lib.$wds @ a w ww1 ww5 ww6 ww7 ww3 of ww8 { Unit# ww9 ->
                 Graphics.Gloss.Internals.Data.Picture.Pictures ww9 } } }) -}
a52da51fabd6c419b38710f4b7e9ff5c
  $fDrawableGrid10 ::
    GHC.Types.Float
    -> Graphics.Gloss.Internals.Data.Picture.Picture
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Translate
                   Lib.$fDrawableGrid8) -}
16e61ff9855bd720a1d9a7fd599849cd
  $fDrawableGrid2 :: [GHC.Types.Float]
  {- Unfolding: (case GHC.Real.$wnumericEnumFromThen
                        @ GHC.Types.Float
                        GHC.Float.$fFractionalFloat
                        Lib.$fDrawableGrid4
                        Lib.$fDrawableGrid3 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Float ww1 ww2 }) -}
da45cf230644b008ce5108902cdf348c
  $fDrawableGrid3 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# -20.0#) -}
99c367e796d7683c7cc45b3f040a1bfe
  $fDrawableGrid4 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# -10.0#) -}
4cd398da35648d676ddfb5842fa32764
  $fDrawableGrid5 :: [GHC.Types.Float]
  {- Unfolding: (case GHC.Real.$wnumericEnumFromThen
                        @ GHC.Types.Float
                        GHC.Float.$fFractionalFloat
                        Lib.$fDrawableGrid7
                        Lib.$fDrawableGrid6 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Float ww1 ww2 }) -}
33a635b4dab42e57208f7d18b2981a26
  $fDrawableGrid6 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# 20.0#) -}
28314e84aa6bece8171fa7ecc1164f7c
  $fDrawableGrid7 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# 10.0#) -}
b8c62846eef8df9fc529461beddcc3a5
  $fDrawableGrid8 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
0807525a993b96a25d6470cd5bcc6919
  $fDrawableGrid9 ::
    Lib.Drawable a =>
    Lib.Line a -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 2, Strictness: <L,C(U)><S(SSS),1*U(U,U,U)>m14,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: Lib.Drawable a) (w1 :: Lib.Line a) ->
                 case w1 of ww { Lib.Line ww1 ww2 ww3 ->
                 case Lib.$wds1 @ a w ww1 ww2 ww3 of ww4 { Unit# ww5 ->
                 Graphics.Gloss.Internals.Data.Picture.Pictures ww5 } }) -}
243af2e8044df158656f143357577dad
  $fDrawableGrid_update ::
    GHC.Types.Float
    -> Graphics.Gloss.Internals.Data.Picture.Picture
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds2 :: GHC.Types.Float)
                   (ds3 :: Graphics.Gloss.Internals.Data.Picture.Picture) ->
                 case ds2 of ds4 { GHC.Types.F# ipv ->
                 case ds3 of wild {
                   DEFAULT
                   -> Graphics.Gloss.Internals.Data.Picture.Translate
                        ds4
                        Lib.$fDrawableGrid8
                        wild
                   Graphics.Gloss.Internals.Data.Picture.Pictures ds5
                   -> case ds5 of wild1 {
                        [] -> Lib.$fDrawableCell1
                        : ipv1 ipv2
                        -> Graphics.Gloss.Internals.Data.Picture.Translate
                             ds4
                             Lib.$fDrawableGrid8
                             wild } } }) -}
0807525a993b96a25d6470cd5bcc6919
  $fDrawableLine :: Lib.Drawable a => Lib.Drawable (Lib.Line a)
  DFunId
  {- Arity: 2, Strictness: <L,C(U)><S(SSS),1*U(U,U,U)>m14,
     Unfolding: InlineRule (0, False, True)
                Lib.$fDrawableGrid9
                  `cast`
                (forall (a :: <*>_N).
                 <Lib.Drawable a>_R ->_R Sym (Lib.N:Drawable[0] <Lib.Line a>_N)) -}
0807525a993b96a25d6470cd5bcc6919
  $fDrawableMaybe ::
    Lib.Drawable a => Lib.Drawable (GHC.Base.Maybe a)
  DFunId
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (0, False, True)
                Lib.$fDrawableMaybe1
                  `cast`
                (forall (a :: <*>_N).
                 <Lib.Drawable a>_R
                 ->_R Sym (Lib.N:Drawable[0] <GHC.Base.Maybe a>_N)) -}
0807525a993b96a25d6470cd5bcc6919
  $fDrawableMaybe1 ::
    Lib.Drawable a =>
    GHC.Base.Maybe a -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dDrawable :: Lib.Drawable a) (ds2 :: GHC.Base.Maybe a) ->
                 case ds2 of wild {
                   GHC.Base.Nothing -> Lib.$fDrawableCell1
                   GHC.Base.Just n
                   -> $dDrawable `cast` (Lib.N:Drawable[0] <a>_N) n }) -}
0807525a993b96a25d6470cd5bcc6919
  $fDrawableNucleobase :: Lib.Drawable Lib.Nucleobase
  DFunId
  {- Arity: 1, Strictness: <S,1*U>m10,
     Unfolding: InlineRule (0, False, True)
                Lib.$fDrawableNucleobase_$cdraw
                  `cast`
                (Sym (Lib.N:Drawable[0] <Lib.Nucleobase>_N)) -}
aa298628aab7c14a827187d4a44afdac
  $fDrawableNucleobase1 ::
    Graphics.Gloss.Internals.Data.Picture.Picture
  {- HasNoCafRefs, Strictness: m5,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.ThickCircle
                   Lib.$fDrawableNucleobase2
                   Lib.$fDrawableNucleobase_r) -}
0b2ed4d46a53dc8461516a6ca8dcf876
  $fDrawableNucleobase2 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 2.0#) -}
888fbcc182915b7c38592786f3cf7fe5
  $fDrawableNucleobase_$cdraw ::
    Lib.Nucleobase -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, Strictness: <S,1*U>m10,
     Unfolding: InlineRule (1, True, False)
                (\ (g :: Lib.Nucleobase) ->
                 case g of g1 { DEFAULT ->
                 case case g1 of wild {
                        Lib.A -> Graphics.Gloss.Data.Color.blue
                        Lib.U -> Graphics.Gloss.Data.Color.red
                        Lib.G -> Graphics.Gloss.Data.Color.green
                        Lib.C
                        -> Graphics.Gloss.Data.Color.yellow } of c { Graphics.Gloss.Internals.Data.Color.RGBA ipv ipv1 ipv2 ipv3 ->
                 Graphics.Gloss.Internals.Data.Picture.Color
                   c
                   Lib.$fDrawableNucleobase1 } }) -}
72c2587d1f16531a9dccb3d9212dfd55
  $fDrawableNucleobase_r :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 4.0#) -}
0807525a993b96a25d6470cd5bcc6919
  $fDrawableNucleotide :: Lib.Drawable Lib.Nucleotide
  DFunId
  {- Arity: 1, Strictness: <S(SSLL),1*U(U,U,A,A)>m14,
     Unfolding: InlineRule (0, False, True)
                Lib.$fDrawableNucleotide_$cdraw
                  `cast`
                (Sym (Lib.N:Drawable[0] <Lib.Nucleotide>_N)) -}
f40dc1efaf965e83265def72e4219ce4
  $fDrawableNucleotide1 ::
    [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Lib.$fDrawableNucleotide2
                   (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture)) -}
663a544d9b0a01053e24d216752ad921
  $fDrawableNucleotide10 ::
    [Graphics.Gloss.Internals.Data.Picture.Point]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   Lib.$fDrawableNucleotide11
                   (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Point)) -}
94ba6477bf341e8f7d5caed4f346a534
  $fDrawableNucleotide11 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Lib.$fDrawableNucleotide12, Lib.$fDrawableGrid8)) -}
e274923cc38bbafec566621a78baa413
  $fDrawableNucleotide12 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# -5.0#) -}
ce15bd231206e4246de3a9163bac9275
  $fDrawableNucleotide13 ::
    [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Lib.$fDrawableNucleotide14
                   (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture)) -}
98a952a57f56e80001ceb70d3ac6de37
  $fDrawableNucleotide14 ::
    Graphics.Gloss.Internals.Data.Picture.Picture
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Line
                   Lib.$fDrawableNucleotide15) -}
9b96263e816d29857bf8dc1e6a52b68f
  $fDrawableNucleotide15 ::
    [Graphics.Gloss.Internals.Data.Picture.Point]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   Lib.$fDrawableNucleotide6
                   Lib.$fDrawableNucleotide16) -}
e12cbcfdb3731143c7a6c567b30c71fd
  $fDrawableNucleotide16 ::
    [Graphics.Gloss.Internals.Data.Picture.Point]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   Lib.$fDrawableNucleotide17
                   (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Point)) -}
ee12fce49ce6723cafd73144107eed38
  $fDrawableNucleotide17 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Lib.$fDrawableGrid8, Lib.$fDrawableNucleotide12)) -}
e4cf0b1f4dc6ea556bd3f32fdafeeda7
  $fDrawableNucleotide18 ::
    [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Lib.$fDrawableNucleotide19
                   (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture)) -}
cab203834c8e0a5363070a8e6c113c7a
  $fDrawableNucleotide19 ::
    Graphics.Gloss.Internals.Data.Picture.Picture
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Line
                   Lib.$fDrawableNucleotide20) -}
9e765ce05389b694fa4b6fd5f4a83da0
  $fDrawableNucleotide2 ::
    Graphics.Gloss.Internals.Data.Picture.Picture
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Line
                   Lib.$fDrawableNucleotide3) -}
e73b415acabbca6fc5ca0956632a8b48
  $fDrawableNucleotide20 ::
    [Graphics.Gloss.Internals.Data.Picture.Point]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   Lib.$fDrawableNucleotide6
                   Lib.$fDrawableNucleotide21) -}
c07dcd350fead771b688c454de05160c
  $fDrawableNucleotide21 ::
    [Graphics.Gloss.Internals.Data.Picture.Point]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   Lib.$fDrawableNucleotide22
                   (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Point)) -}
38a3d0e51762b11ecf97de477561de19
  $fDrawableNucleotide22 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Lib.$fDrawableGrid8, Lib.$fDrawableCell_r)) -}
b881df6a1b0de8854750665521481a34
  $fDrawableNucleotide3 ::
    [Graphics.Gloss.Internals.Data.Picture.Point]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   Lib.$fDrawableNucleotide6
                   Lib.$fDrawableNucleotide4) -}
dcb1a16fb978b24fde414dc432438104
  $fDrawableNucleotide4 ::
    [Graphics.Gloss.Internals.Data.Picture.Point]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   Lib.$fDrawableNucleotide5
                   (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Point)) -}
d06946bd4f22ec9e3653a9df671e780a
  $fDrawableNucleotide5 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Lib.$fDrawableCell_r, Lib.$fDrawableGrid8)) -}
ec6bce70d24911940596eff89dba861e
  $fDrawableNucleotide6 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Lib.$fDrawableGrid8, Lib.$fDrawableGrid8)) -}
d245a1d00895afd4dab304bacc14b862
  $fDrawableNucleotide7 ::
    [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Lib.$fDrawableNucleotide8
                   (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture)) -}
a3982cc343dffdff0d754eef530190c1
  $fDrawableNucleotide8 ::
    Graphics.Gloss.Internals.Data.Picture.Picture
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Line
                   Lib.$fDrawableNucleotide9) -}
9278aea576f32e81fef36c20d5547edd
  $fDrawableNucleotide9 ::
    [Graphics.Gloss.Internals.Data.Picture.Point]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   Lib.$fDrawableNucleotide6
                   Lib.$fDrawableNucleotide10) -}
8549cc0d9dc97d5424007378062aeaf3
  $fDrawableNucleotide_$cdraw ::
    Lib.Nucleotide -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, Strictness: <S(SSLL),1*U(U,U,A,A)>m14,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Lib.Nucleotide) ->
                 case w of ww { Lib.Nucleotide ww1 ww2 ww3 ww4 ->
                 case case ww2 of wild {
                        GHC.Base.Nothing
                        -> GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture
                        GHC.Base.Just ds2
                        -> case ds2 of wild1 {
                             Lib.Up -> Lib.$fDrawableNucleotide18
                             Lib.Down -> Lib.$fDrawableNucleotide13
                             Lib.Left -> Lib.$fDrawableNucleotide7
                             Lib.Right -> Lib.$fDrawableNucleotide1 } } of p3 { DEFAULT ->
                 case case ww1 of wild {
                        Lib.A -> Graphics.Gloss.Data.Color.blue
                        Lib.U -> Graphics.Gloss.Data.Color.red
                        Lib.G -> Graphics.Gloss.Data.Color.green
                        Lib.C
                        -> Graphics.Gloss.Data.Color.yellow } of c { Graphics.Gloss.Internals.Data.Color.RGBA ipv ipv1 ipv2 ipv3 ->
                 Graphics.Gloss.Internals.Data.Picture.Pictures
                   (GHC.Types.:
                      @ Graphics.Gloss.Internals.Data.Picture.Picture
                      (Graphics.Gloss.Internals.Data.Picture.Color
                         c
                         Lib.$fDrawableNucleobase1)
                      p3) } } }) -}
463a0832461734b6986e0096eed3bf84
  $fEqCell :: GHC.Classes.Eq Lib.Cell
  DFunId
  {- HasNoCafRefs, Strictness: m,
     Unfolding: DFun:. @ Lib.Cell Lib.$fEqCell_$c== Lib.$fEqCell1 -}
463a0832461734b6986e0096eed3bf84
  $fEqCell1 :: Lib.Cell -> Lib.Cell -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Lib.Cell) (b :: Lib.Cell) ->
                 case a of a1 { DEFAULT ->
                 case b of b1 { DEFAULT ->
                 case a1 of wild {
                   Lib.Alive
                   -> case b1 of wild1 {
                        Lib.Alive -> GHC.Types.False Lib.Dead -> GHC.Types.True }
                   Lib.Dead
                   -> case b1 of wild1 {
                        Lib.Alive -> GHC.Types.True Lib.Dead -> GHC.Types.False } } } }) -}
463a0832461734b6986e0096eed3bf84
  $fEqCell_$c== :: Lib.Cell -> Lib.Cell -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds2 :: Lib.Cell) (ds3 :: Lib.Cell) ->
                 case ds2 of wild {
                   Lib.Alive
                   -> case ds3 of wild1 {
                        Lib.Alive -> GHC.Types.True Lib.Dead -> GHC.Types.False }
                   Lib.Dead
                   -> case ds3 of wild1 {
                        Lib.Alive -> GHC.Types.False Lib.Dead -> GHC.Types.True } }) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFoldableGrid :: Data.Foldable.Foldable Lib.Grid
  DFunId
  {- Unfolding: DFun:.
                  @ Lib.Grid
                  Lib.$fFoldableGrid24
                  Lib.$fFoldableGrid23
                  Lib.$fFoldableGrid_$cfoldr1
                  Lib.$fFoldableGrid22
                  Lib.$fFoldableGrid21
                  Lib.$fFoldableGrid20
                  Lib.$fFoldableGrid18
                  Lib.$fFoldableGrid16
                  Lib.$fFoldableGrid15
                  Lib.$fFoldableGrid13
                  Lib.$fFoldableGrid10
                  Lib.$fFoldableGrid9
                  Lib.$fFoldableGrid7
                  Lib.$fFoldableGrid5
                  Lib.$fFoldableGrid3
                  Lib.$fFoldableGrid1 -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFoldableGrid1 :: GHC.Num.Num a => Lib.Grid a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),U(A,A,1*U,A,A,A,1*C1(U))><S(SS(SSS)S),1*U(U,U(U,U,U),U)>,
     Unfolding: InlineRule (0, True, True)
                Lib.$fFoldableGrid2
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Num.Num a>_R
                 ->_R <Lib.Grid a>_R
                 ->_R Data.Monoid.N:Product[0] <a>_R) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFoldableGrid10 :: Lib.Grid a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS(SSS)S),1*U(U,U(U,U,U),U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Lib.Grid a) ->
                 case w of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 Lib.$w$cfoldr
                   @ a
                   @ (GHC.Types.Int -> GHC.Types.Int)
                   (Lib.$fFoldableGrid12 @ a)
                   (GHC.Base.id @ GHC.Types.Int)
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   Lib.$fFoldableGrid11 } }) -}
93b7b699ead82b453e0a3197927b5a64
  $fFoldableGrid11 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
fce8dd08996f289ccdd4998d83cf4619
  $fFoldableGrid12 ::
    a
    -> (GHC.Types.Int -> GHC.Types.Int)
    -> GHC.Types.Int
    -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ @ a
                   (x2 :: a)
                   (k :: GHC.Types.Int -> GHC.Types.Int)
                   (z :: GHC.Types.Int) ->
                 case z of wild { GHC.Types.I# x3 ->
                 k (GHC.Types.I# (GHC.Prim.+# x3 1#)) }) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFoldableGrid13 :: Lib.Grid a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ a (w :: Lib.Grid a) ->
                 case w of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 Lib.$w$cfoldr
                   @ a
                   @ GHC.Types.Bool
                   (Lib.$fFoldableGrid14 @ a)
                   GHC.Types.True
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3 } }) -}
035fe9a7f9ad7ae45fb4aeaa45266e00
  $fFoldableGrid14 :: a -> GHC.Types.Bool -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a (ds2 :: a) (ds3 :: GHC.Types.Bool) -> GHC.Types.False) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFoldableGrid15 :: Lib.Grid a -> [a]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True) Lib.$fFoldableGrid_toList -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFoldableGrid16 :: (a -> a -> a) -> Lib.Grid a -> a
  {- Arity: 2,
     Strictness: <L,C(C1(U))><S(SS(SSS)S),1*U(U,U(U,U,U),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: a -> a -> a) (w1 :: Lib.Grid a) ->
                 case w1 of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 Lib.$wds6 @ a w ww1 ww5 ww6 ww7 ww3 } }) -}
d6c6f3b89f82e69afaa7c4ee5de56f3a
  $fFoldableGrid17 :: a
  {- Strictness: x -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFoldableGrid18 :: (a -> a -> a) -> Lib.Grid a -> a
  {- Arity: 2,
     Strictness: <L,C(C1(U))><S(SS(SSS)S),1*U(U,U(U,U,U),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: a -> a -> a) (w1 :: Lib.Grid a) ->
                 case w1 of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 Lib.$wds7 @ a w ww1 ww5 ww6 ww7 ww3 } }) -}
604868048ad546227bdb36b6d70978d9
  $fFoldableGrid19 :: a
  {- Strictness: x -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFoldableGrid2 ::
    GHC.Num.Num a => Lib.Grid a -> Data.Monoid.Product a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),U(A,A,1*U,A,A,A,1*C1(U))><S(SS(SSS)S),1*U(U,U(U,U,U),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Num.Num a) (w1 :: Lib.Grid a) ->
                 case w1 of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 Lib.$wds2 @ a w ww1 ww5 ww6 ww7 ww3 } }) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFoldableGrid20 :: (b -> a -> b) -> b -> Lib.Grid a -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,U><S(SS(SSS)S),1*U(U,U(U,U,U),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ b @ a (w :: b -> a -> b) (w1 :: b) (w2 :: Lib.Grid a) ->
                 case w2 of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 Lib.$wds8 @ b @ a w w1 ww1 ww5 ww6 ww7 ww3 } }) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFoldableGrid21 :: (b -> a -> b) -> b -> Lib.Grid a -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,U><S(SS(SSS)S),1*U(U,U(U,U,U),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ b @ a (w :: b -> a -> b) (w1 :: b) (w2 :: Lib.Grid a) ->
                 case w2 of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 Lib.$wds9 @ b @ a w w1 ww1 ww5 ww6 ww7 ww3 } }) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFoldableGrid22 :: (a -> b -> b) -> b -> Lib.Grid a -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,U><S(SS(SSS)S),1*U(U,U(U,U,U),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a @ b (w :: a -> b -> b) (w1 :: b) (w2 :: Lib.Grid a) ->
                 case w2 of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 Lib.$wds10 @ a @ b w w1 ww1 ww5 ww6 ww7 ww3 } }) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFoldableGrid23 ::
    GHC.Base.Monoid m => (a -> m) -> Lib.Grid a -> m
  {- Arity: 2, Strictness: <L,U(1*U,1*U,A)><L,C(U)>,
     Unfolding: InlineRule (0, True, True) Lib.$fFoldableGrid_foldMap -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFoldableGrid24 :: GHC.Base.Monoid m => Lib.Grid m -> m
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),U(1*U,1*U,A)><S(SS(SSS)S),1*U(U,U(U,U,U),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ m (w :: GHC.Base.Monoid m) (w1 :: Lib.Grid m) ->
                 case w1 of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 Lib.$wds11 @ m w ww1 ww5 ww6 ww7 ww3 } }) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFoldableGrid3 :: GHC.Num.Num a => Lib.Grid a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),U(1*U,A,A,A,A,A,1*C1(U))><S(SS(SSS)S),1*U(U,U(U,U,U),U)>,
     Unfolding: InlineRule (0, True, True)
                Lib.$fFoldableGrid4
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Num.Num a>_R
                 ->_R <Lib.Grid a>_R
                 ->_R Data.Monoid.N:Sum[0] <a>_R) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFoldableGrid4 :: GHC.Num.Num a => Lib.Grid a -> Data.Monoid.Sum a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),U(1*U,A,A,A,A,A,1*C1(U))><S(SS(SSS)S),1*U(U,U(U,U,U),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Num.Num a) (w1 :: Lib.Grid a) ->
                 case w1 of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 Lib.$wds3 @ a w ww1 ww5 ww6 ww7 ww3 } }) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFoldableGrid5 :: GHC.Classes.Ord a => Lib.Grid a -> a
  {- Arity: 2,
     Strictness: <L,U(A,A,A,C(C1(U)),A,A,A,A)><S(SS(SSS)S),1*U(U,U(U,U,U),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Classes.Ord a) (w1 :: Lib.Grid a) ->
                 case w1 of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 Lib.$wds4 @ a w ww1 ww5 ww6 ww7 ww3 } }) -}
808830690103772e7587f2b9be4a3c32
  $fFoldableGrid6 :: a
  {- Strictness: x -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFoldableGrid7 :: GHC.Classes.Ord a => Lib.Grid a -> a
  {- Arity: 2,
     Strictness: <L,U(A,A,A,A,A,C(C1(U)),A,A)><S(SS(SSS)S),1*U(U,U(U,U,U),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Classes.Ord a) (w1 :: Lib.Grid a) ->
                 case w1 of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 Lib.$wds5 @ a w ww1 ww5 ww6 ww7 ww3 } }) -}
1da4ce08b8ab5729a861aab542fd16f8
  $fFoldableGrid8 :: a
  {- Strictness: x -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFoldableGrid9 ::
    GHC.Classes.Eq a => a -> Lib.Grid a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(U),A)><L,U>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) (eta :: a) ->
                 let {
                   f :: a -> GHC.Types.Bool = GHC.Classes.== @ a $dEq eta
                 } in
                 let {
                   lvl8 :: a -> Data.Monoid.Any -> Data.Monoid.Any {- Arity: 1 -}
                   = \ (x2 :: a) ->
                     let {
                       ds2 :: GHC.Types.Bool = f x2
                     } in
                     (\ (ds3 :: GHC.Types.Bool) ->
                      case ds2 of wild {
                        GHC.Types.False -> ds3 GHC.Types.True -> GHC.Types.True })
                       `cast`
                     (Sym (Data.Monoid.N:Any[0]) ->_R Sym (Data.Monoid.N:Any[0]))
                 } in
                 (\ (eta1 :: Lib.Grid a) ->
                  case eta1 of ww { Lib.Grid ww1 ww2 ww3 ->
                  case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                  Lib.$w$cfoldr
                    @ a
                    @ Data.Monoid.Any
                    lvl8
                    GHC.Types.False `cast` (Sym (Data.Monoid.N:Any[0]))
                    ww1
                    ww5
                    ww6
                    ww7
                    ww3 } })
                   `cast`
                 (<Lib.Grid a>_R ->_R Data.Monoid.N:Any[0])) -}
8686dbec211485f63024895e989213b5
  $fFoldableGrid_$cfoldr :: (a -> b -> b) -> b -> Lib.Line a -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U><S(SSS),1*U(U,U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a @ b (w :: a -> b -> b) (w1 :: b) (w2 :: Lib.Line a) ->
                 case w2 of ww { Lib.Line ww1 ww2 ww3 ->
                 Lib.$w$cfoldr1 @ a @ b w w1 ww1 ww2 ww3 }) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFoldableGrid_$cfoldr1 :: (a -> b -> b) -> b -> Lib.Grid a -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U><S(SS(SSS)S),1*U(U,U(U,U,U),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a @ b (w :: a -> b -> b) (w1 :: b) (w2 :: Lib.Grid a) ->
                 case w2 of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 Lib.$w$cfoldr @ a @ b w w1 ww1 ww5 ww6 ww7 ww3 } }) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFoldableGrid_foldMap ::
    GHC.Base.Monoid m => (a -> m) -> Lib.Grid a -> m
  {- Arity: 2, Strictness: <L,U(1*U,1*U,A)><L,C(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ m
                   @ a
                   ($dMonoid :: GHC.Base.Monoid m)
                   (f :: a -> m)
                   (eta :: Lib.Grid a) ->
                 let {
                   f1 :: m -> m -> m = GHC.Base.mappend @ m $dMonoid
                 } in
                 Lib.$fFoldableGrid_$cfoldr1
                   @ a
                   @ m
                   (\ (x2 :: a) -> f1 (f x2))
                   (GHC.Base.mempty @ m $dMonoid)
                   eta) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFoldableGrid_toList :: Lib.Grid a -> [a]
  {- Arity: 1, Strictness: <L,U>, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (t1 :: Lib.Grid a) ->
                 GHC.Base.build
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    Lib.$fFoldableGrid_$cfoldr1 @ a @ b c n t1)) -}
8686dbec211485f63024895e989213b5
  $fFoldableLine :: Data.Foldable.Foldable Lib.Line
  DFunId
  {- Unfolding: DFun:.
                  @ Lib.Line
                  Lib.$fFoldableLine17
                  Lib.$fFoldableLine16
                  Lib.$fFoldableGrid_$cfoldr
                  Lib.$fFoldableLine15
                  Lib.$fFoldableLine14
                  Lib.$fFoldableLine13
                  Lib.$fFoldableLine12
                  Lib.$fFoldableLine11
                  Lib.$fFoldableLine10
                  Lib.$fFoldableLine9
                  Lib.$fFoldableLine8
                  Lib.$fFoldableLine7
                  Lib.$fFoldableLine6
                  Lib.$fFoldableLine5
                  Lib.$fFoldableLine3
                  Lib.$fFoldableLine1 -}
8686dbec211485f63024895e989213b5
  $fFoldableLine1 :: GHC.Num.Num a => Lib.Line a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),U(A,A,1*U,A,A,A,1*C1(U))><S(SSS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Lib.$fFoldableLine2
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Num.Num a>_R
                 ->_R <Lib.Line a>_R
                 ->_R Data.Monoid.N:Product[0] <a>_R) -}
8686dbec211485f63024895e989213b5
  $fFoldableLine10 :: Lib.Line a -> [a]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True) Lib.$fFoldableLine_toList -}
8686dbec211485f63024895e989213b5
  $fFoldableLine11 :: (a -> a -> a) -> Lib.Line a -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S(SSS),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: a -> a -> a) (w1 :: Lib.Line a) ->
                 case w1 of ww { Lib.Line ww1 ww2 ww3 ->
                 Lib.$wds16 @ a w ww1 ww2 ww3 }) -}
8686dbec211485f63024895e989213b5
  $fFoldableLine12 :: (a -> a -> a) -> Lib.Line a -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S(SSS),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: a -> a -> a) (w1 :: Lib.Line a) ->
                 case w1 of ww { Lib.Line ww1 ww2 ww3 ->
                 Lib.$wds17 @ a w ww1 ww2 ww3 }) -}
8686dbec211485f63024895e989213b5
  $fFoldableLine13 :: (b -> a -> b) -> b -> Lib.Line a -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,U><S(SSS),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ b @ a (w :: b -> a -> b) (w1 :: b) (w2 :: Lib.Line a) ->
                 case w2 of ww { Lib.Line ww1 ww2 ww3 ->
                 Lib.$wds18 @ b @ a w w1 ww1 ww2 ww3 }) -}
8686dbec211485f63024895e989213b5
  $fFoldableLine14 :: (b -> a -> b) -> b -> Lib.Line a -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,U><S(SSS),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ b @ a (w :: b -> a -> b) (w1 :: b) (w2 :: Lib.Line a) ->
                 case w2 of ww { Lib.Line ww1 ww2 ww3 ->
                 Lib.$wds19 @ b @ a w w1 ww1 ww2 ww3 }) -}
8686dbec211485f63024895e989213b5
  $fFoldableLine15 :: (a -> b -> b) -> b -> Lib.Line a -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,U><S(SSS),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a @ b (w :: a -> b -> b) (w1 :: b) (w2 :: Lib.Line a) ->
                 case w2 of ww { Lib.Line ww1 ww2 ww3 ->
                 Lib.$wds20 @ a @ b w w1 ww1 ww2 ww3 }) -}
8686dbec211485f63024895e989213b5
  $fFoldableLine16 ::
    GHC.Base.Monoid m => (a -> m) -> Lib.Line a -> m
  {- Arity: 2, Strictness: <L,U(1*U,1*U,A)><L,C(U)>,
     Unfolding: InlineRule (0, True, True) Lib.$fFoldableLine_foldMap -}
8686dbec211485f63024895e989213b5
  $fFoldableLine17 :: GHC.Base.Monoid m => Lib.Line m -> m
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),U(1*U,1*U,A)><S(SSS),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ m (w :: GHC.Base.Monoid m) (w1 :: Lib.Line m) ->
                 case w1 of ww { Lib.Line ww1 ww2 ww3 ->
                 Lib.$wds21 @ m w ww1 ww2 ww3 }) -}
8686dbec211485f63024895e989213b5
  $fFoldableLine2 ::
    GHC.Num.Num a => Lib.Line a -> Data.Monoid.Product a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),U(A,A,1*U,A,A,A,1*C1(U))><S(SSS),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Num.Num a) (w1 :: Lib.Line a) ->
                 case w1 of ww { Lib.Line ww1 ww2 ww3 ->
                 Lib.$wds12 @ a w ww1 ww2 ww3 }) -}
8686dbec211485f63024895e989213b5
  $fFoldableLine3 :: GHC.Num.Num a => Lib.Line a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),U(1*U,A,A,A,A,A,1*C1(U))><S(SSS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Lib.$fFoldableLine4
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Num.Num a>_R
                 ->_R <Lib.Line a>_R
                 ->_R Data.Monoid.N:Sum[0] <a>_R) -}
8686dbec211485f63024895e989213b5
  $fFoldableLine4 :: GHC.Num.Num a => Lib.Line a -> Data.Monoid.Sum a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),U(1*U,A,A,A,A,A,1*C1(U))><S(SSS),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Num.Num a) (w1 :: Lib.Line a) ->
                 case w1 of ww { Lib.Line ww1 ww2 ww3 ->
                 Lib.$wds13 @ a w ww1 ww2 ww3 }) -}
8686dbec211485f63024895e989213b5
  $fFoldableLine5 :: GHC.Classes.Ord a => Lib.Line a -> a
  {- Arity: 2,
     Strictness: <L,U(A,A,A,C(C1(U)),A,A,A,A)><S(SSS),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Classes.Ord a) (w1 :: Lib.Line a) ->
                 case w1 of ww { Lib.Line ww1 ww2 ww3 ->
                 Lib.$wds14 @ a w ww1 ww2 ww3 }) -}
8686dbec211485f63024895e989213b5
  $fFoldableLine6 :: GHC.Classes.Ord a => Lib.Line a -> a
  {- Arity: 2,
     Strictness: <L,U(A,A,A,A,A,C(C1(U)),A,A)><S(SSS),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Classes.Ord a) (w1 :: Lib.Line a) ->
                 case w1 of ww { Lib.Line ww1 ww2 ww3 ->
                 Lib.$wds15 @ a w ww1 ww2 ww3 }) -}
8686dbec211485f63024895e989213b5
  $fFoldableLine7 ::
    GHC.Classes.Eq a => a -> Lib.Line a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(U),A)><L,U>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) (eta :: a) ->
                 let {
                   f :: a -> GHC.Types.Bool = GHC.Classes.== @ a $dEq eta
                 } in
                 let {
                   lvl8 :: a -> Data.Monoid.Any -> Data.Monoid.Any {- Arity: 1 -}
                   = \ (x2 :: a) ->
                     let {
                       ds2 :: GHC.Types.Bool = f x2
                     } in
                     (\ (ds3 :: GHC.Types.Bool) ->
                      case ds2 of wild {
                        GHC.Types.False -> ds3 GHC.Types.True -> GHC.Types.True })
                       `cast`
                     (Sym (Data.Monoid.N:Any[0]) ->_R Sym (Data.Monoid.N:Any[0]))
                 } in
                 (\ (eta1 :: Lib.Line a) ->
                  case eta1 of ww { Lib.Line ww1 ww2 ww3 ->
                  Lib.$w$cfoldr1
                    @ a
                    @ Data.Monoid.Any
                    lvl8
                    GHC.Types.False `cast` (Sym (Data.Monoid.N:Any[0]))
                    ww1
                    ww2
                    ww3 })
                   `cast`
                 (<Lib.Line a>_R ->_R Data.Monoid.N:Any[0])) -}
8686dbec211485f63024895e989213b5
  $fFoldableLine8 :: Lib.Line a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SSS),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Lib.Line a) ->
                 case w of ww { Lib.Line ww1 ww2 ww3 ->
                 Lib.$w$cfoldr1
                   @ a
                   @ (GHC.Types.Int -> GHC.Types.Int)
                   (Lib.$fFoldableGrid12 @ a)
                   (GHC.Base.id @ GHC.Types.Int)
                   ww1
                   ww2
                   ww3
                   Lib.$fFoldableGrid11 }) -}
8686dbec211485f63024895e989213b5
  $fFoldableLine9 :: Lib.Line a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ a (w :: Lib.Line a) ->
                 case w of ww { Lib.Line ww1 ww2 ww3 ->
                 Lib.$w$cfoldr1
                   @ a
                   @ GHC.Types.Bool
                   (Lib.$fFoldableGrid14 @ a)
                   GHC.Types.True
                   ww1
                   ww2
                   ww3 }) -}
8686dbec211485f63024895e989213b5
  $fFoldableLine_foldMap ::
    GHC.Base.Monoid m => (a -> m) -> Lib.Line a -> m
  {- Arity: 2, Strictness: <L,U(1*U,1*U,A)><L,C(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ m
                   @ a
                   ($dMonoid :: GHC.Base.Monoid m)
                   (f :: a -> m)
                   (eta :: Lib.Line a) ->
                 let {
                   f1 :: m -> m -> m = GHC.Base.mappend @ m $dMonoid
                 } in
                 Lib.$fFoldableGrid_$cfoldr
                   @ a
                   @ m
                   (\ (x2 :: a) -> f1 (f x2))
                   (GHC.Base.mempty @ m $dMonoid)
                   eta) -}
8686dbec211485f63024895e989213b5
  $fFoldableLine_toList :: Lib.Line a -> [a]
  {- Arity: 1, Strictness: <L,U>, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (t1 :: Lib.Line a) ->
                 GHC.Base.build
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    Lib.$fFoldableGrid_$cfoldr @ a @ b c n t1)) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFunctorGrid :: GHC.Base.Functor Lib.Grid
  DFunId
  {- HasNoCafRefs, Strictness: m,
     Unfolding: DFun:.
                  @ Lib.Grid Lib.$fComonadGrid_$cfmap Lib.$fFunctorGrid1 -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fFunctorGrid1 :: a -> Lib.Grid b -> Lib.Grid a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U><S(SS(SSS)S),1*U(U,U(U,U,U),U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (eta :: a) (eta1 :: Lib.Grid b) ->
                 Lib.$fComonadGrid_$cfmap @ b @ a (\ (ds2 :: b) -> eta) eta1) -}
8686dbec211485f63024895e989213b5
  $fFunctorLine :: GHC.Base.Functor Lib.Line
  DFunId
  {- HasNoCafRefs, Strictness: m,
     Unfolding: DFun:.
                  @ Lib.Line Lib.$fFunctorLine_$cfmap Lib.$fFunctorLine1 -}
8686dbec211485f63024895e989213b5
  $fFunctorLine1 :: a -> Lib.Line b -> Lib.Line a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S(SSS),1*U(U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (eta :: a) (eta1 :: Lib.Line b) ->
                 Lib.$fFunctorLine_$cfmap @ b @ a (\ (ds2 :: b) -> eta) eta1) -}
8686dbec211485f63024895e989213b5
  $fFunctorLine_$cfmap :: (a -> b) -> Lib.Line a -> Lib.Line b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S(SSS),1*U(U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (w :: a -> b) (w1 :: Lib.Line a) ->
                 case w1 of ww { Lib.Line ww1 ww2 ww3 ->
                 case GHC.Base.map @ a @ b w ww1 of dt { DEFAULT ->
                 case w ww2 of dt1 { DEFAULT ->
                 case GHC.Base.map @ a @ b w ww3 of dt2 { DEFAULT ->
                 Lib.Line @ b dt dt1 dt2 } } } }) -}
463a0832461734b6986e0096eed3bf84
  $fShowCell :: GHC.Show.Show Lib.Cell
  DFunId
  {- Strictness: m,
     Unfolding: DFun:.
                  @ Lib.Cell Lib.$fShowCell5 Lib.$fShowCell_$cshow Lib.$fShowCell1 -}
463a0832461734b6986e0096eed3bf84
  $fShowCell1 :: [Lib.Cell] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Lib.Cell]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Lib.Cell Lib.$fShowCell2 ls s) -}
463a0832461734b6986e0096eed3bf84
  $fShowCell2 :: Lib.Cell -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x2 :: Lib.Cell) (s :: GHC.Base.String)[OneShot] ->
                 case x2 of wild {
                   Lib.Alive -> GHC.Base.++ @ GHC.Types.Char Lib.$fShowCell4 s
                   Lib.Dead -> GHC.Base.++ @ GHC.Types.Char Lib.$fShowCell3 s }) -}
f0a3cb0ea38395f8fec2318168759c81
  $fShowCell3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " "#) -}
764a332ef12f2b7cf42f95f6b2989cfd
  $fShowCell4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "O"#) -}
463a0832461734b6986e0096eed3bf84
  $fShowCell5 :: GHC.Types.Int -> Lib.Cell -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds2 :: GHC.Types.Int)
                   (x2 :: Lib.Cell)
                   (s :: GHC.Base.String) ->
                 case x2 of wild {
                   Lib.Alive
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Lib.$fShowCell4)
                        s
                   Lib.Dead
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Lib.$fShowCell3)
                        s }) -}
463a0832461734b6986e0096eed3bf84
  $fShowCell_$cshow :: Lib.Cell -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds2 :: Lib.Cell) ->
                 case ds2 of wild {
                   Lib.Alive -> Lib.$fShowCell4 Lib.Dead -> Lib.$fShowCell3 }) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fShowGrid :: GHC.Show.Show a => GHC.Show.Show (Lib.Grid a)
  DFunId
  {- Arity: 1, Strictness: <L,U(A,U,A)>m,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (Lib.Grid a)
                  (Lib.$fShowGrid_$cshowsPrec @ a $dShow)
                  (Lib.$fShowGrid3 @ a $dShow)
                  (Lib.$fShowGrid_$cshowList @ a $dShow) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fShowGrid1 :: GHC.Show.Show a => [Lib.Grid a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(A,U,A)><S,1*U><L,U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Lib.Grid a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Lib.Grid a)
                   (\ (x2 :: Lib.Grid a) (s1 :: GHC.Base.String)[OneShot] ->
                    case x2 of ww { Lib.Grid ww1 ww2 ww3 ->
                    case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (Lib.$wds22 @ a $dShow ww1 ww5 ww6 ww7 ww3)
                      s1 } })
                   ls
                   s) -}
5319cbe5801ea8cff9a8240b11edec6e
  $fShowGrid2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fShowGrid3 :: GHC.Show.Show a => Lib.Grid a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(A,U,A)><S(SSS),1*U(U,U(U,U,U),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Show.Show a) (w1 :: Lib.Grid a) ->
                 case w1 of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 Lib.$wds22 @ a w ww1 ww5 ww6 ww7 ww3 } }) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fShowGrid4 ::
    GHC.Show.Show a => GHC.Types.Int -> Lib.Grid a -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(A,U,A)><L,A><S(SSS),1*U(U,U(U,U,U),U)><L,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ds2 :: GHC.Types.Int)
                   (x2 :: Lib.Grid a)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Lib.$fShowGrid3 @ a $dShow x2))
                   s) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fShowGrid_$cshowList ::
    GHC.Show.Show a => [Lib.Grid a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(A,U,A)><S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True) Lib.$fShowGrid1 -}
2988a1eaac9fe8aa29b908b484e2b72d
  $fShowGrid_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> Lib.Grid a -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(A,U,A)><L,A><S(SSS),1*U(U,U(U,U,U),U)><L,1*U>,
     Unfolding: InlineRule (0, True, True) Lib.$fShowGrid4 -}
8686dbec211485f63024895e989213b5
  $fShowLine :: GHC.Show.Show a => GHC.Show.Show (Lib.Line a)
  DFunId
  {- Arity: 1, Strictness: <L,U(A,U,A)>m,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (Lib.Line a)
                  (Lib.$fShowLine_$cshowsPrec @ a $dShow)
                  (Lib.$fShowLine2 @ a $dShow)
                  (Lib.$fShowLine_$cshowList @ a $dShow) -}
8686dbec211485f63024895e989213b5
  $fShowLine1 :: GHC.Show.Show a => [Lib.Line a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(A,U,A)><S,1*U><L,U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Lib.Line a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Lib.Line a)
                   (\ (x2 :: Lib.Line a) (s1 :: GHC.Base.String)[OneShot] ->
                    case x2 of ww { Lib.Line ww1 ww2 ww3 ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (Lib.$wds23 @ a $dShow ww1 ww2 ww3)
                      s1 })
                   ls
                   s) -}
8686dbec211485f63024895e989213b5
  $fShowLine2 :: GHC.Show.Show a => Lib.Line a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(A,1*U,A)><S(SSS),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Show.Show a) (w1 :: Lib.Line a) ->
                 case w1 of ww { Lib.Line ww1 ww2 ww3 ->
                 Lib.$wds23 @ a w ww1 ww2 ww3 }) -}
8686dbec211485f63024895e989213b5
  $fShowLine3 ::
    GHC.Show.Show a => GHC.Types.Int -> Lib.Line a -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(A,1*U,A)><L,A><S(SSS),1*U(U,U,U)><L,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ds2 :: GHC.Types.Int)
                   (x2 :: Lib.Line a)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Lib.$fShowLine2 @ a $dShow x2))
                   s) -}
8686dbec211485f63024895e989213b5
  $fShowLine_$cshowList ::
    GHC.Show.Show a => [Lib.Line a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(A,U,A)><S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True) Lib.$fShowLine1 -}
8686dbec211485f63024895e989213b5
  $fShowLine_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> Lib.Line a -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(A,1*U,A)><L,A><S(SSS),1*U(U,U,U)><L,1*U>,
     Unfolding: InlineRule (0, True, True) Lib.$fShowLine3 -}
40d339c0e3a65a4d6b5a05fbbe2ec9b2
  $sdraw4 ::
    GHC.Base.Maybe Lib.Nucleotide
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, Strictness: <S,1*U>m14,
     Unfolding: InlineRule (1, True, False)
                (\ (ds2 :: GHC.Base.Maybe Lib.Nucleotide) ->
                 case ds2 of wild {
                   GHC.Base.Nothing -> Lib.$fDrawableCell1
                   GHC.Base.Just n -> Lib.$fDrawableNucleotide_$cdraw n }) -}
fa3a7ed695af5b1cd85cfc69228a510f
  $tc'A :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7508557490480246418##
                   8460976399938764108##
                   Lib.$trModule
                   Lib.$tc'A1) -}
4014d795c89b595082f944da3492bc82
  $tc'A1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'A"#) -}
09b92960f3c346ca2ff6f031b044a4a9
  $tc'Alive :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14459637506714919157##
                   11082505573064363940##
                   Lib.$trModule
                   Lib.$tc'Alive1) -}
66464c94a6d37951d8c2ba0c684367bf
  $tc'Alive1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Alive"#) -}
ddf18b424b76335c3fd170aa942a9687
  $tc'C :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5936383825828241600##
                   6198043311383395204##
                   Lib.$trModule
                   Lib.$tc'C1) -}
698db3ac7bdd6b82e1d65e1f80947a0d
  $tc'C1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C"#) -}
864f8115ad1ab34f360dbf770dbe4a27
  $tc'C:Drawable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2386380972245009428##
                   5758040944035283132##
                   Lib.$trModule
                   Lib.$tc'C:Drawable1) -}
cb8eb6c7403518ccbf3857d807ea6f4c
  $tc'C:Drawable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:Drawable"#) -}
b1bf6261b00b8049d60389c03faba3c2
  $tc'Dead :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7513328843865537760##
                   12801425626025760602##
                   Lib.$trModule
                   Lib.$tc'Dead1) -}
c7ffefda79d66348c54925d275ef412f
  $tc'Dead1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Dead"#) -}
8cd72e1833e7fccfacc40c07e448bade
  $tc'Down :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1215803153529949119##
                   7007906752371775546##
                   Lib.$trModule
                   Lib.$tc'Down1) -}
b11149f07ab992dd988f6b8a84811f05
  $tc'Down1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Down"#) -}
42c9d2a89851d44523ec87ce11fc73f8
  $tc'G :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14514170214476168151##
                   1506080773422873404##
                   Lib.$trModule
                   Lib.$tc'G1) -}
cf5786627c00c4087d449615b466c805
  $tc'G1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'G"#) -}
eae627f60a5b6053597950cd86848087
  $tc'Grid :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16445585956267217022##
                   8542471636497526493##
                   Lib.$trModule
                   Lib.$tc'Grid1) -}
458063f2e23f100a4fe5a77f72f2e02b
  $tc'Grid1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Grid"#) -}
daed578a00e9739f6f3ce08a1c9109d8
  $tc'Left :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   509938707104497337##
                   11778990776664985971##
                   Lib.$trModule
                   Lib.$tc'Left1) -}
33c66b4c38bb9c0b4c124af387391b50
  $tc'Left1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Left"#) -}
2793f92a8f690a048f4a68fb2f43c581
  $tc'Line :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11919953961670932291##
                   16243761390054928015##
                   Lib.$trModule
                   Lib.$tc'Line1) -}
d44098bfa221ec90e57cd83187bc4d53
  $tc'Line1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Line"#) -}
7e793648dbac36f15781d20ba66aeb4a
  $tc'Nucleotide :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18325834591151435387##
                   836167382162981357##
                   Lib.$trModule
                   Lib.$tc'Nucleotide1) -}
a72e5e702097574a450698834e97bb93
  $tc'Nucleotide1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Nucleotide"#) -}
18b6f3459490e8add457d7223131475d
  $tc'Right :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6589406618430698315##
                   14820389843349112097##
                   Lib.$trModule
                   Lib.$tc'Right1) -}
3115ec49d51819e855f1949e4d9d287a
  $tc'Right1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Right"#) -}
6859ea9e6be5bb2c050500737adb4023
  $tc'U :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8496726726679379102##
                   17232973436833001995##
                   Lib.$trModule
                   Lib.$tc'U1) -}
90958f1209286641f28338644544a973
  $tc'U1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'U"#) -}
9283c82de9f9bab8fc24cbb9c22f7b7b
  $tc'Up :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1361779355145972287##
                   7401686818487989592##
                   Lib.$trModule
                   Lib.$tc'Up1) -}
d6e6ff2002ecfc6537eba2ba5588b7ac
  $tc'Up1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Up"#) -}
1d1837bfc8a197712767c912e293ff03
  $tcCell :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3301936671594119247##
                   7210652194990791377##
                   Lib.$trModule
                   Lib.$tcCell1) -}
ac7dcffe74a5469a89672fdef6aef717
  $tcCell1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Cell"#) -}
961d702bb6758aaaa21422d101ac108d
  $tcDirection :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12102113355876026772##
                   105875023508657353##
                   Lib.$trModule
                   Lib.$tcDirection1) -}
12595f538d180a1619843de79641b182
  $tcDirection1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Direction"#) -}
6fb5d746109cf0724b7fac6e2b8b7cc9
  $tcDrawable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   792136031739644747##
                   5063071489631867445##
                   Lib.$trModule
                   Lib.$tcDrawable1) -}
f3ef668df102939d3aa5c08888067b32
  $tcDrawable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Drawable"#) -}
71d83bb225e7ac4765c545ebe0153b16
  $tcGrid :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   323930099235899801##
                   9692845752296338445##
                   Lib.$trModule
                   Lib.$tcGrid1) -}
b724ff2fa3478d33b34d4d1c1bb48932
  $tcGrid1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Grid"#) -}
c34a3a1f1a1da974e4cd8d283f939d2f
  $tcLine :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13258212023138086354##
                   17061255036001991010##
                   Lib.$trModule
                   Lib.$tcLine1) -}
3624c315af178cc76a799ad64135f3a1
  $tcLine1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Line"#) -}
f084912e13fcabbd7f4557c2e4e5becc
  $tcNucleobase :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14711412613599109058##
                   4396672373584897534##
                   Lib.$trModule
                   Lib.$tcNucleobase1) -}
37f0434fc21fb32a97f366d59ccada3d
  $tcNucleobase1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Nucleobase"#) -}
7615aefce4eea12cbb4b5eb94f541afc
  $tcNucleotide :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   376267356317837060##
                   7129306321925156011##
                   Lib.$trModule
                   Lib.$tcNucleotide1) -}
3895b55084bf383f70b41ac54dd8dacc
  $tcNucleotide1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Nucleotide"#) -}
9f40eb97f6f1630f0fb8edef15697a33
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
681269e01034b11c99d1f43ebe7d7bc0
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
401bbeb64746d05846f09eb47b09d0ec
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "DSPB-0.1.0.0-IzuWE0A9uXqKGPPquzCxk7"#) -}
35a7beac6980edec9d5cc6c9b69e832e
  $w$cfmap ::
    (a -> b)
    -> [Lib.Line a]
    -> [a]
    -> a
    -> [a]
    -> [Lib.Line a]
    -> (# [Lib.Line b], Lib.Line b, [Lib.Line b] #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><S,U><S,U><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: a -> b)
                   (ww :: [Lib.Line a])
                   (ww1 :: [a])
                   (ww2 :: a)
                   (ww3 :: [a])
                   (ww4 :: [Lib.Line a]) ->
                 case GHC.Base.map
                        @ (Lib.Line a)
                        @ (Lib.Line b)
                        (\ (ds2 :: Lib.Line a) ->
                         case ds2 of wild { Lib.Line left x2 right ->
                         case GHC.Base.map @ a @ b w left of dt { DEFAULT ->
                         case w x2 of dt1 { DEFAULT ->
                         case GHC.Base.map @ a @ b w right of dt2 { DEFAULT ->
                         Lib.Line @ b dt dt1 dt2 } } } })
                        ww of dt { DEFAULT ->
                 case GHC.Base.map @ a @ b w ww1 of dt1 { DEFAULT ->
                 case w ww2 of dt2 { DEFAULT ->
                 case GHC.Base.map @ a @ b w ww3 of dt3 { DEFAULT ->
                 case GHC.Base.map
                        @ (Lib.Line a)
                        @ (Lib.Line b)
                        (\ (ds2 :: Lib.Line a) ->
                         case ds2 of wild { Lib.Line left x2 right ->
                         case GHC.Base.map @ a @ b w left of dt4 { DEFAULT ->
                         case w x2 of dt5 { DEFAULT ->
                         case GHC.Base.map @ a @ b w right of dt6 { DEFAULT ->
                         Lib.Line @ b dt4 dt5 dt6 } } } })
                        ww4 of dt4 { DEFAULT ->
                 (# dt, Lib.Line @ b dt1 dt2 dt3, dt4 #) } } } } }) -}
2f52480f3a43b435c6ce9da8aacdf6aa
  $w$cfoldr ::
    (a -> b -> b)
    -> b -> [Lib.Line a] -> [a] -> a -> [a] -> [Lib.Line a] -> b
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U><S,U><S,U><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: a -> b -> b)
                   (w1 :: b)
                   (ww :: [Lib.Line a])
                   (ww1 :: [a])
                   (ww2 :: a)
                   (ww3 :: [a])
                   (ww4 :: [Lib.Line a]) ->
                 letrec {
                   go :: [Lib.Line a] -> b -> b
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (ds2 :: [Lib.Line a]) (eta :: b) ->
                     case ds2 of wild {
                       [] -> eta
                       : y ys -> go ys (Lib.$fFoldableGrid_$cfoldr @ a @ b w eta y) }
                 } in
                 letrec {
                   go1 :: [Lib.Line a] -> b {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds2 :: [Lib.Line a]) ->
                     case ds2 of wild {
                       [] -> w1
                       : y ys
                       -> case y of ww5 { Lib.Line ww6 ww7 ww8 ->
                          Lib.$w$cfoldr1 @ a @ b w (go1 ys) ww6 ww7 ww8 } }
                 } in
                 go ww (Lib.$w$cfoldr1 @ a @ b w (go1 ww4) ww1 ww2 ww3)) -}
6ebe3363080c40edb0a4e51981a6424f
  $w$cfoldr1 :: (a -> b -> b) -> b -> [a] -> a -> [a] -> b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: a -> b -> b)
                   (w1 :: b)
                   (ww :: [a])
                   (ww1 :: a)
                   (ww2 :: [a]) ->
                 case w1 of acc { DEFAULT ->
                 letrec {
                   go :: [a] -> b -> b {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (ds2 :: [a]) (eta :: b) ->
                     case ds2 of wild {
                       [] -> eta : y ys -> case eta of z { DEFAULT -> go ys (w y z) } }
                 } in
                 go
                   ww
                   (w ww1
                      (letrec {
                         go1 :: [a] -> b {- Arity: 1, Strictness: <S,1*U> -}
                         = \ (ds2 :: [a]) ->
                           case ds2 of wild { [] -> acc : y ys -> w y (go1 ys) }
                       } in
                       go1 ww2)) }) -}
859a59464ee5be186273d4517083a4d3
  $wappendToLine :: [a] -> a -> [a] -> a -> (# [a], a, [a] #)
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><S,U><S,U><S,1*U>,
     Inline: [0] -}
5d1c504c28b7173d60a63022c3ded513
  $wconwayUpdate ::
    [Lib.Line Lib.Cell]
    -> [Lib.Cell]
    -> Lib.Cell
    -> [Lib.Cell]
    -> [Lib.Line Lib.Cell]
    -> Lib.Cell
  {- Arity: 5, HasNoCafRefs, Strictness: <S,U><L,U><S,U><L,U><S,U>,
     Inline: [0] -}
0807525a993b96a25d6470cd5bcc6919
  $wds ::
    Lib.Drawable a =>
    [Lib.Line a]
    -> [a]
    -> a
    -> [a]
    -> [Lib.Line a]
    -> (# [Graphics.Gloss.Internals.Data.Picture.Picture] #)
  {- Arity: 6, Strictness: <L,C(U)><S,U><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Lib.Drawable a)
                   (ww :: [Lib.Line a])
                   (ww1 :: [a])
                   (ww2 :: a)
                   (ww3 :: [a])
                   (ww4 :: [Lib.Line a]) ->
                 case GHC.List.zipWith
                        @ GHC.Types.Float
                        @ Graphics.Gloss.Internals.Data.Picture.Picture
                        @ Graphics.Gloss.Internals.Data.Picture.Picture
                        Lib.$fDrawableGrid10
                        Lib.$fDrawableGrid2
                        (GHC.Base.map
                           @ (Lib.Line a)
                           @ Graphics.Gloss.Internals.Data.Picture.Picture
                           (Lib.$fDrawableGrid9 @ a w)
                           ww4) of downD { DEFAULT ->
                 case GHC.List.zipWith
                        @ GHC.Types.Float
                        @ Graphics.Gloss.Internals.Data.Picture.Picture
                        @ Graphics.Gloss.Internals.Data.Picture.Picture
                        Lib.$fDrawableGrid10
                        Lib.$fDrawableGrid5
                        (GHC.Base.map
                           @ (Lib.Line a)
                           @ Graphics.Gloss.Internals.Data.Picture.Picture
                           (Lib.$fDrawableGrid9 @ a w)
                           ww) of upD { DEFAULT ->
                 (# GHC.Types.:
                      @ Graphics.Gloss.Internals.Data.Picture.Picture
                      (case Lib.$wds1 @ a w ww1 ww2 ww3 of ww5 { Unit# ww6 ->
                       Graphics.Gloss.Internals.Data.Picture.Pictures ww6 })
                      (GHC.Base.++
                         @ Graphics.Gloss.Internals.Data.Picture.Picture
                         upD
                         downD) #) } }) -}
0807525a993b96a25d6470cd5bcc6919
  $wds1 ::
    Lib.Drawable a =>
    [a]
    -> a
    -> [a]
    -> (# [Graphics.Gloss.Internals.Data.Picture.Picture] #)
  {- Arity: 4, Strictness: <L,C(U)><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: Lib.Drawable a)
                   (ww :: [a])
                   (ww1 :: a)
                   (ww2 :: [a]) ->
                 case GHC.List.zipWith
                        @ GHC.Types.Float
                        @ Graphics.Gloss.Internals.Data.Picture.Picture
                        @ Graphics.Gloss.Internals.Data.Picture.Picture
                        Lib.$fDrawableGrid_update
                        Lib.$fDrawableGrid5
                        (GHC.Base.map
                           @ a
                           @ Graphics.Gloss.Internals.Data.Picture.Picture
                           w `cast` (Lib.N:Drawable[0] <a>_N)
                           ww2) of rightD { DEFAULT ->
                 case GHC.List.zipWith
                        @ GHC.Types.Float
                        @ Graphics.Gloss.Internals.Data.Picture.Picture
                        @ Graphics.Gloss.Internals.Data.Picture.Picture
                        Lib.$fDrawableGrid_update
                        Lib.$fDrawableGrid2
                        (GHC.Base.map
                           @ a
                           @ Graphics.Gloss.Internals.Data.Picture.Picture
                           w `cast` (Lib.N:Drawable[0] <a>_N)
                           ww) of leftD { DEFAULT ->
                 (# GHC.Types.:
                      @ Graphics.Gloss.Internals.Data.Picture.Picture
                      (w `cast` (Lib.N:Drawable[0] <a>_N) ww1)
                      (GHC.Base.++
                         @ Graphics.Gloss.Internals.Data.Picture.Picture
                         leftD
                         rightD) #) } }) -}
df6ae9b6229e31a369b689bd3eae2caf
  $wds10 ::
    (a -> b -> b)
    -> b -> [Lib.Line a] -> [a] -> a -> [a] -> [Lib.Line a] -> b
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,U><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: a -> b -> b)
                   (w1 :: b)
                   (ww :: [Lib.Line a])
                   (ww1 :: [a])
                   (ww2 :: a)
                   (ww3 :: [a])
                   (ww4 :: [Lib.Line a]) ->
                 (Lib.$w$cfoldr
                    @ a
                    @ (Data.Monoid.Dual (Data.Monoid.Endo (b -> b)))
                    (\ (x2 :: a)
                       (eta :: Data.Monoid.Dual (Data.Monoid.Endo (b -> b)))
                       (eta1 :: b -> b) ->
                     eta
                       `cast`
                     (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b -> b>_R))
                       (\ (z :: b) -> case w x2 z of vx { DEFAULT -> eta1 vx }))
                      `cast`
                    (<a>_R
                     ->_R <Data.Monoid.Dual (Data.Monoid.Endo (b -> b))>_R
                     ->_R Sym (Data.Monoid.N:Dual[0]
                                   (Data.Monoid.N:Endo[0] <b -> b>_R)))
                    (GHC.Base.id @ (b -> b))
                      `cast`
                    (Sym (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b -> b>_R)))
                    ww
                    ww1
                    ww2
                    ww3
                    ww4)
                   `cast`
                 (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b -> b>_R))
                   (GHC.Base.id @ b)
                   w1) -}
d386b94d22ef6decb8b4c03f3900a831
  $wds11 ::
    GHC.Base.Monoid m =>
    [Lib.Line m] -> [m] -> m -> [m] -> [Lib.Line m] -> m
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(SLL),U(1*U,1*U,A)><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ m
                   (w :: GHC.Base.Monoid m)
                   (ww :: [Lib.Line m])
                   (ww1 :: [m])
                   (ww2 :: m)
                   (ww3 :: [m])
                   (ww4 :: [Lib.Line m]) ->
                 let {
                   f1 :: m -> m -> m = GHC.Base.mappend @ m w
                 } in
                 Lib.$w$cfoldr
                   @ m
                   @ m
                   (\ (x2 :: m) -> f1 x2)
                   (GHC.Base.mempty @ m w)
                   ww
                   ww1
                   ww2
                   ww3
                   ww4) -}
f9ed5d593e80136fd99457bb260561cb
  $wds12 :: GHC.Num.Num a => [a] -> a -> [a] -> Data.Monoid.Product a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),U(A,A,1*U,A,A,A,1*C1(U))><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Num.Num a)
                   (ww :: [a])
                   (ww1 :: a)
                   (ww2 :: [a]) ->
                 let {
                   f1 :: a -> a -> a = GHC.Num.* @ a w
                 } in
                 Lib.$w$cfoldr1
                   @ a
                   @ (Data.Monoid.Product a)
                   (\ (x2 :: a) -> f1 x2)
                     `cast`
                   (<a>_R
                    ->_R Sym (Data.Monoid.N:Product[0] <a>_R)
                    ->_R Sym (Data.Monoid.N:Product[0] <a>_R))
                   (GHC.Num.fromInteger @ a w Data.Monoid.$fMonoidProduct1)
                     `cast`
                   (Sym (Data.Monoid.N:Product[0] <a>_R))
                   ww
                   ww1
                   ww2) -}
88da466e40f4b3e1f32e136cbbd0d4dd
  $wds13 :: GHC.Num.Num a => [a] -> a -> [a] -> Data.Monoid.Sum a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),U(1*U,A,A,A,A,A,1*C1(U))><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Num.Num a)
                   (ww :: [a])
                   (ww1 :: a)
                   (ww2 :: [a]) ->
                 let {
                   f1 :: a -> a -> a = GHC.Num.+ @ a w
                 } in
                 Lib.$w$cfoldr1
                   @ a
                   @ (Data.Monoid.Sum a)
                   (\ (x2 :: a) -> f1 x2)
                     `cast`
                   (<a>_R
                    ->_R Sym (Data.Monoid.N:Sum[0] <a>_R)
                    ->_R Sym (Data.Monoid.N:Sum[0] <a>_R))
                   (GHC.Num.fromInteger @ a w Data.Monoid.$fMonoidSum1)
                     `cast`
                   (Sym (Data.Monoid.N:Sum[0] <a>_R))
                   ww
                   ww1
                   ww2) -}
282f04184319592509ef877419294aa9
  $wds14 :: GHC.Classes.Ord a => [a] -> a -> [a] -> a
  {- Arity: 4,
     Strictness: <L,U(A,A,A,C(C1(U)),A,A,A,A)><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (ww :: [a])
                   (ww1 :: a)
                   (ww2 :: [a]) ->
                 case (Lib.$w$cfoldr1
                         @ a
                         @ (Data.Foldable.Min a)
                         (\ (x2 :: a) (eta :: Data.Foldable.Min a) ->
                          case eta `cast` (Data.Foldable.N:Min[0] <a>_N) of wild {
                            GHC.Base.Nothing
                            -> (GHC.Base.Just @ a x2)
                                 `cast`
                               (Sym (Data.Foldable.N:Min[0]) <a>_N)
                            GHC.Base.Just ipv
                            -> case GHC.Classes.<= @ a w x2 ipv of wild2 {
                                 GHC.Types.False -> wild `cast` (Sym (Data.Foldable.N:Min[0]) <a>_N)
                                 GHC.Types.True
                                 -> (GHC.Base.Just @ a x2)
                                      `cast`
                                    (Sym (Data.Foldable.N:Min[0]) <a>_N) } })
                         (GHC.Base.Nothing @ a) `cast` (Sym (Data.Foldable.N:Min[0]) <a>_N)
                         ww
                         ww1
                         ww2)
                        `cast`
                      (Data.Foldable.N:Min[0] <a>_N) of wild {
                   GHC.Base.Nothing -> Lib.$fFoldableGrid6 @ a
                   GHC.Base.Just v -> v }) -}
8d2712105f7e9925442d5af8b6d15231
  $wds15 :: GHC.Classes.Ord a => [a] -> a -> [a] -> a
  {- Arity: 4,
     Strictness: <L,U(A,A,A,A,A,C(C1(U)),A,A)><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (ww :: [a])
                   (ww1 :: a)
                   (ww2 :: [a]) ->
                 case (Lib.$w$cfoldr1
                         @ a
                         @ (Data.Foldable.Max a)
                         (\ (x2 :: a) (eta :: Data.Foldable.Max a) ->
                          case eta `cast` (Data.Foldable.N:Max[0] <a>_N) of wild {
                            GHC.Base.Nothing
                            -> (GHC.Base.Just @ a x2)
                                 `cast`
                               (Sym (Data.Foldable.N:Max[0]) <a>_N)
                            GHC.Base.Just ipv
                            -> case GHC.Classes.>= @ a w x2 ipv of wild2 {
                                 GHC.Types.False -> wild `cast` (Sym (Data.Foldable.N:Max[0]) <a>_N)
                                 GHC.Types.True
                                 -> (GHC.Base.Just @ a x2)
                                      `cast`
                                    (Sym (Data.Foldable.N:Max[0]) <a>_N) } })
                         (GHC.Base.Nothing @ a) `cast` (Sym (Data.Foldable.N:Max[0]) <a>_N)
                         ww
                         ww1
                         ww2)
                        `cast`
                      (Data.Foldable.N:Max[0] <a>_N) of wild {
                   GHC.Base.Nothing -> Lib.$fFoldableGrid8 @ a
                   GHC.Base.Just v -> v }) -}
b75a661541c750dfab31a1bb05423640
  $wds16 :: (a -> a -> a) -> [a] -> a -> [a] -> a
  {- Arity: 4, Strictness: <L,C(C1(U))><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: a -> a -> a)
                   (ww :: [a])
                   (ww1 :: a)
                   (ww2 :: [a]) ->
                 case (Lib.$w$cfoldr1
                         @ a
                         @ (Data.Monoid.Dual (Data.Monoid.Endo (GHC.Base.Maybe a)))
                         (\ (x2 :: a)
                            (eta :: Data.Monoid.Dual (Data.Monoid.Endo (GHC.Base.Maybe a)))
                            (eta1 :: GHC.Base.Maybe a) ->
                          eta
                            `cast`
                          (Data.Monoid.N:Dual[0]
                               (Data.Monoid.N:Endo[0] <GHC.Base.Maybe a>_R))
                            (GHC.Base.Just
                               @ a
                               (case eta1 of wild {
                                  GHC.Base.Nothing -> x2 GHC.Base.Just x3 -> w x3 x2 })))
                           `cast`
                         (<a>_R
                          ->_R <Data.Monoid.Dual (Data.Monoid.Endo (GHC.Base.Maybe a))>_R
                          ->_R Sym (Data.Monoid.N:Dual[0]
                                        (Data.Monoid.N:Endo[0] <GHC.Base.Maybe a>_R)))
                         (GHC.Base.id @ (GHC.Base.Maybe a))
                           `cast`
                         (Sym (Data.Monoid.N:Dual[0]
                                   (Data.Monoid.N:Endo[0] <GHC.Base.Maybe a>_R)))
                         ww
                         ww1
                         ww2)
                        `cast`
                      (Data.Monoid.N:Dual[0]
                           (Data.Monoid.N:Endo[0] <GHC.Base.Maybe a>_R))
                        (GHC.Base.Nothing @ a) of wild {
                   GHC.Base.Nothing -> Lib.$fFoldableGrid17 @ a
                   GHC.Base.Just v -> v }) -}
640f1756425780bb817d42e8aa1bb17b
  $wds17 :: (a -> a -> a) -> [a] -> a -> [a] -> a
  {- Arity: 4, Strictness: <L,C(C1(U))><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: a -> a -> a)
                   (ww :: [a])
                   (ww1 :: a)
                   (ww2 :: [a]) ->
                 case Lib.$w$cfoldr1
                        @ a
                        @ (GHC.Base.Maybe a)
                        (\ (x2 :: a) (m :: GHC.Base.Maybe a) ->
                         GHC.Base.Just
                           @ a
                           (case m of wild {
                              GHC.Base.Nothing -> x2 GHC.Base.Just y -> w x2 y }))
                        (GHC.Base.Nothing @ a)
                        ww
                        ww1
                        ww2 of wild {
                   GHC.Base.Nothing -> Lib.$fFoldableGrid19 @ a
                   GHC.Base.Just v -> v }) -}
7fbf20a741505247d86d9cae86453f90
  $wds18 :: (b -> a -> b) -> b -> [a] -> a -> [a] -> b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,U><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ @ b
                   @ a
                   (w :: b -> a -> b)
                   (w1 :: b)
                   (ww :: [a])
                   (ww1 :: a)
                   (ww2 :: [a]) ->
                 Lib.$w$cfoldr1
                   @ a
                   @ (b -> b)
                   (\ (x2 :: a) (k :: b -> b) (z :: b) ->
                    case w z x2 of vx { DEFAULT -> k vx })
                   (GHC.Base.id @ b)
                   ww
                   ww1
                   ww2
                   w1) -}
0fc571a200f084da6053b732a977793d
  $wds19 :: (b -> a -> b) -> b -> [a] -> a -> [a] -> b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,U><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ @ b
                   @ a
                   (w :: b -> a -> b)
                   (w1 :: b)
                   (ww :: [a])
                   (ww1 :: a)
                   (ww2 :: [a]) ->
                 (Lib.$w$cfoldr1
                    @ a
                    @ (Data.Monoid.Dual (Data.Monoid.Endo b))
                    (\ (x2 :: a)
                       (eta :: Data.Monoid.Dual (Data.Monoid.Endo b))
                       (eta1 :: b) ->
                     eta `cast` (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b>_R))
                       (w eta1 x2))
                      `cast`
                    (<a>_R
                     ->_R <Data.Monoid.Dual (Data.Monoid.Endo b)>_R
                     ->_R Sym (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b>_R)))
                    (GHC.Base.id @ b)
                      `cast`
                    (Sym (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b>_R)))
                    ww
                    ww1
                    ww2)
                   `cast`
                 (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b>_R))
                   w1) -}
7bc11ad835fb3b61da191a5af719273d
  $wds2 ::
    GHC.Num.Num a =>
    [Lib.Line a]
    -> [a] -> a -> [a] -> [Lib.Line a] -> Data.Monoid.Product a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),U(A,A,1*U,A,A,A,1*C1(U))><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Num.Num a)
                   (ww :: [Lib.Line a])
                   (ww1 :: [a])
                   (ww2 :: a)
                   (ww3 :: [a])
                   (ww4 :: [Lib.Line a]) ->
                 let {
                   f1 :: a -> a -> a = GHC.Num.* @ a w
                 } in
                 Lib.$w$cfoldr
                   @ a
                   @ (Data.Monoid.Product a)
                   (\ (x2 :: a) -> f1 x2)
                     `cast`
                   (<a>_R
                    ->_R Sym (Data.Monoid.N:Product[0] <a>_R)
                    ->_R Sym (Data.Monoid.N:Product[0] <a>_R))
                   (GHC.Num.fromInteger @ a w Data.Monoid.$fMonoidProduct1)
                     `cast`
                   (Sym (Data.Monoid.N:Product[0] <a>_R))
                   ww
                   ww1
                   ww2
                   ww3
                   ww4) -}
79a61a792281d90b01fc2dc2d9b9ef82
  $wds20 :: (a -> b -> b) -> b -> [a] -> a -> [a] -> b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,U><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: a -> b -> b)
                   (w1 :: b)
                   (ww :: [a])
                   (ww1 :: a)
                   (ww2 :: [a]) ->
                 (Lib.$w$cfoldr1
                    @ a
                    @ (Data.Monoid.Dual (Data.Monoid.Endo (b -> b)))
                    (\ (x2 :: a)
                       (eta :: Data.Monoid.Dual (Data.Monoid.Endo (b -> b)))
                       (eta1 :: b -> b) ->
                     eta
                       `cast`
                     (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b -> b>_R))
                       (\ (z :: b) -> case w x2 z of vx { DEFAULT -> eta1 vx }))
                      `cast`
                    (<a>_R
                     ->_R <Data.Monoid.Dual (Data.Monoid.Endo (b -> b))>_R
                     ->_R Sym (Data.Monoid.N:Dual[0]
                                   (Data.Monoid.N:Endo[0] <b -> b>_R)))
                    (GHC.Base.id @ (b -> b))
                      `cast`
                    (Sym (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b -> b>_R)))
                    ww
                    ww1
                    ww2)
                   `cast`
                 (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b -> b>_R))
                   (GHC.Base.id @ b)
                   w1) -}
88e58e183d3f6bb609a03a10ab598be9
  $wds21 :: GHC.Base.Monoid m => [m] -> m -> [m] -> m
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(SLL),U(1*U,1*U,A)><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ @ m
                   (w :: GHC.Base.Monoid m)
                   (ww :: [m])
                   (ww1 :: m)
                   (ww2 :: [m]) ->
                 let {
                   f1 :: m -> m -> m = GHC.Base.mappend @ m w
                 } in
                 Lib.$w$cfoldr1
                   @ m
                   @ m
                   (\ (x2 :: m) -> f1 x2)
                   (GHC.Base.mempty @ m w)
                   ww
                   ww1
                   ww2) -}
95e0f871523d197ebef68739f3cc00dc
  $wds22 ::
    GHC.Show.Show a =>
    [Lib.Line a] -> [a] -> a -> [a] -> [Lib.Line a] -> GHC.Base.String
  {- Arity: 6, Strictness: <L,U(A,U,A)><S,U><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: [Lib.Line a])
                   (ww1 :: [a])
                   (ww2 :: a)
                   (ww3 :: [a])
                   (ww4 :: [Lib.Line a]) ->
                 letrec {
                   go :: [Lib.Line a] -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds2 :: [Lib.Line a]) ->
                     case ds2 of wild {
                       [] -> GHC.Types.[] @ GHC.Types.Char
                       : y ys
                       -> case y of ww5 { Lib.Line ww6 ww7 ww8 ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            (Lib.$wds23 @ a w ww6 ww7 ww8)
                            (GHC.Base.++ @ GHC.Types.Char Lib.$fShowGrid2 (go ys)) } }
                 } in
                 case go ww4 of doSh { DEFAULT ->
                 letrec {
                   go1 :: [Lib.Line a] -> [GHC.Types.Char] -> [GHC.Types.Char]
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (ds2 :: [Lib.Line a]) (eta :: [GHC.Types.Char]) ->
                     case ds2 of wild {
                       [] -> eta
                       : y ys
                       -> case eta of z { DEFAULT ->
                          case y of ww5 { Lib.Line ww6 ww7 ww8 ->
                          go1
                            ys
                            (GHC.Base.++
                               @ GHC.Types.Char
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  (Lib.$wds23 @ a w ww6 ww7 ww8)
                                  Lib.$fShowGrid2)
                               z) } } }
                 } in
                 case go1 ww (GHC.Types.[] @ GHC.Types.Char) of upSh { DEFAULT ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   upSh
                   (GHC.Base.++
                      @ GHC.Types.Char
                      (Lib.$wds23 @ a w ww1 ww2 ww3)
                      (GHC.CString.unpackAppendCString# "\n"# doSh)) } }) -}
0a12db7572bb9248e1f8d7bb50764c9b
  $wds23 :: GHC.Show.Show a => [a] -> a -> [a] -> [GHC.Types.Char]
  {- Arity: 4, Strictness: <L,1*U(A,1*U,A)><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: [a])
                   (ww1 :: a)
                   (ww2 :: [a]) ->
                 let {
                   g :: a -> [GHC.Types.Char] = GHC.Show.show @ a w
                 } in
                 Lib.$w$cfoldr1
                   @ a
                   @ [GHC.Types.Char]
                   (\ (x2 :: a) (b2 :: [GHC.Types.Char]) ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (g x2)
                      (GHC.Base.++ @ GHC.Types.Char Lib.$fShowCell3 b2))
                   (GHC.Types.[] @ GHC.Types.Char)
                   ww
                   ww1
                   ww2) -}
bd1addec666ff9d9327c047bffaedb01
  $wds3 ::
    GHC.Num.Num a =>
    [Lib.Line a]
    -> [a] -> a -> [a] -> [Lib.Line a] -> Data.Monoid.Sum a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),U(1*U,A,A,A,A,A,1*C1(U))><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Num.Num a)
                   (ww :: [Lib.Line a])
                   (ww1 :: [a])
                   (ww2 :: a)
                   (ww3 :: [a])
                   (ww4 :: [Lib.Line a]) ->
                 let {
                   f1 :: a -> a -> a = GHC.Num.+ @ a w
                 } in
                 Lib.$w$cfoldr
                   @ a
                   @ (Data.Monoid.Sum a)
                   (\ (x2 :: a) -> f1 x2)
                     `cast`
                   (<a>_R
                    ->_R Sym (Data.Monoid.N:Sum[0] <a>_R)
                    ->_R Sym (Data.Monoid.N:Sum[0] <a>_R))
                   (GHC.Num.fromInteger @ a w Data.Monoid.$fMonoidSum1)
                     `cast`
                   (Sym (Data.Monoid.N:Sum[0] <a>_R))
                   ww
                   ww1
                   ww2
                   ww3
                   ww4) -}
5bca7a40a8d620a7def8b2832f6f3f14
  $wds4 ::
    GHC.Classes.Ord a =>
    [Lib.Line a] -> [a] -> a -> [a] -> [Lib.Line a] -> a
  {- Arity: 6,
     Strictness: <L,U(A,A,A,C(C1(U)),A,A,A,A)><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (ww :: [Lib.Line a])
                   (ww1 :: [a])
                   (ww2 :: a)
                   (ww3 :: [a])
                   (ww4 :: [Lib.Line a]) ->
                 case (Lib.$w$cfoldr
                         @ a
                         @ (Data.Foldable.Min a)
                         (\ (x2 :: a) (eta :: Data.Foldable.Min a) ->
                          case eta `cast` (Data.Foldable.N:Min[0] <a>_N) of wild {
                            GHC.Base.Nothing
                            -> (GHC.Base.Just @ a x2)
                                 `cast`
                               (Sym (Data.Foldable.N:Min[0]) <a>_N)
                            GHC.Base.Just ipv
                            -> case GHC.Classes.<= @ a w x2 ipv of wild2 {
                                 GHC.Types.False -> wild `cast` (Sym (Data.Foldable.N:Min[0]) <a>_N)
                                 GHC.Types.True
                                 -> (GHC.Base.Just @ a x2)
                                      `cast`
                                    (Sym (Data.Foldable.N:Min[0]) <a>_N) } })
                         (GHC.Base.Nothing @ a) `cast` (Sym (Data.Foldable.N:Min[0]) <a>_N)
                         ww
                         ww1
                         ww2
                         ww3
                         ww4)
                        `cast`
                      (Data.Foldable.N:Min[0] <a>_N) of wild {
                   GHC.Base.Nothing -> Lib.$fFoldableGrid6 @ a
                   GHC.Base.Just v -> v }) -}
aba820bb0e3e647e9c9b718ad6a76e6c
  $wds5 ::
    GHC.Classes.Ord a =>
    [Lib.Line a] -> [a] -> a -> [a] -> [Lib.Line a] -> a
  {- Arity: 6,
     Strictness: <L,U(A,A,A,A,A,C(C1(U)),A,A)><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (ww :: [Lib.Line a])
                   (ww1 :: [a])
                   (ww2 :: a)
                   (ww3 :: [a])
                   (ww4 :: [Lib.Line a]) ->
                 case (Lib.$w$cfoldr
                         @ a
                         @ (Data.Foldable.Max a)
                         (\ (x2 :: a) (eta :: Data.Foldable.Max a) ->
                          case eta `cast` (Data.Foldable.N:Max[0] <a>_N) of wild {
                            GHC.Base.Nothing
                            -> (GHC.Base.Just @ a x2)
                                 `cast`
                               (Sym (Data.Foldable.N:Max[0]) <a>_N)
                            GHC.Base.Just ipv
                            -> case GHC.Classes.>= @ a w x2 ipv of wild2 {
                                 GHC.Types.False -> wild `cast` (Sym (Data.Foldable.N:Max[0]) <a>_N)
                                 GHC.Types.True
                                 -> (GHC.Base.Just @ a x2)
                                      `cast`
                                    (Sym (Data.Foldable.N:Max[0]) <a>_N) } })
                         (GHC.Base.Nothing @ a) `cast` (Sym (Data.Foldable.N:Max[0]) <a>_N)
                         ww
                         ww1
                         ww2
                         ww3
                         ww4)
                        `cast`
                      (Data.Foldable.N:Max[0] <a>_N) of wild {
                   GHC.Base.Nothing -> Lib.$fFoldableGrid8 @ a
                   GHC.Base.Just v -> v }) -}
866e67cd85351390245036d61fd78fcc
  $wds6 ::
    (a -> a -> a)
    -> [Lib.Line a] -> [a] -> a -> [a] -> [Lib.Line a] -> a
  {- Arity: 6, Strictness: <L,C(C1(U))><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: a -> a -> a)
                   (ww :: [Lib.Line a])
                   (ww1 :: [a])
                   (ww2 :: a)
                   (ww3 :: [a])
                   (ww4 :: [Lib.Line a]) ->
                 case (Lib.$w$cfoldr
                         @ a
                         @ (Data.Monoid.Dual (Data.Monoid.Endo (GHC.Base.Maybe a)))
                         (\ (x2 :: a)
                            (eta :: Data.Monoid.Dual (Data.Monoid.Endo (GHC.Base.Maybe a)))
                            (eta1 :: GHC.Base.Maybe a) ->
                          eta
                            `cast`
                          (Data.Monoid.N:Dual[0]
                               (Data.Monoid.N:Endo[0] <GHC.Base.Maybe a>_R))
                            (GHC.Base.Just
                               @ a
                               (case eta1 of wild {
                                  GHC.Base.Nothing -> x2 GHC.Base.Just x3 -> w x3 x2 })))
                           `cast`
                         (<a>_R
                          ->_R <Data.Monoid.Dual (Data.Monoid.Endo (GHC.Base.Maybe a))>_R
                          ->_R Sym (Data.Monoid.N:Dual[0]
                                        (Data.Monoid.N:Endo[0] <GHC.Base.Maybe a>_R)))
                         (GHC.Base.id @ (GHC.Base.Maybe a))
                           `cast`
                         (Sym (Data.Monoid.N:Dual[0]
                                   (Data.Monoid.N:Endo[0] <GHC.Base.Maybe a>_R)))
                         ww
                         ww1
                         ww2
                         ww3
                         ww4)
                        `cast`
                      (Data.Monoid.N:Dual[0]
                           (Data.Monoid.N:Endo[0] <GHC.Base.Maybe a>_R))
                        (GHC.Base.Nothing @ a) of wild {
                   GHC.Base.Nothing -> Lib.$fFoldableGrid17 @ a
                   GHC.Base.Just v -> v }) -}
47a87ffdb488deee95089575c5b805b7
  $wds7 ::
    (a -> a -> a)
    -> [Lib.Line a] -> [a] -> a -> [a] -> [Lib.Line a] -> a
  {- Arity: 6, Strictness: <L,C(C1(U))><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: a -> a -> a)
                   (ww :: [Lib.Line a])
                   (ww1 :: [a])
                   (ww2 :: a)
                   (ww3 :: [a])
                   (ww4 :: [Lib.Line a]) ->
                 case Lib.$w$cfoldr
                        @ a
                        @ (GHC.Base.Maybe a)
                        (\ (x2 :: a) (m :: GHC.Base.Maybe a) ->
                         GHC.Base.Just
                           @ a
                           (case m of wild {
                              GHC.Base.Nothing -> x2 GHC.Base.Just y -> w x2 y }))
                        (GHC.Base.Nothing @ a)
                        ww
                        ww1
                        ww2
                        ww3
                        ww4 of wild {
                   GHC.Base.Nothing -> Lib.$fFoldableGrid19 @ a
                   GHC.Base.Just v -> v }) -}
71c406d3dd519ea9f751ccce83751c53
  $wds8 ::
    (b -> a -> b)
    -> b -> [Lib.Line a] -> [a] -> a -> [a] -> [Lib.Line a] -> b
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,U><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ b
                   @ a
                   (w :: b -> a -> b)
                   (w1 :: b)
                   (ww :: [Lib.Line a])
                   (ww1 :: [a])
                   (ww2 :: a)
                   (ww3 :: [a])
                   (ww4 :: [Lib.Line a]) ->
                 Lib.$w$cfoldr
                   @ a
                   @ (b -> b)
                   (\ (x2 :: a) (k :: b -> b) (z :: b) ->
                    case w z x2 of vx { DEFAULT -> k vx })
                   (GHC.Base.id @ b)
                   ww
                   ww1
                   ww2
                   ww3
                   ww4
                   w1) -}
414606a84f5745428f9e8cfc81bb83eb
  $wds9 ::
    (b -> a -> b)
    -> b -> [Lib.Line a] -> [a] -> a -> [a] -> [Lib.Line a] -> b
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,U><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ b
                   @ a
                   (w :: b -> a -> b)
                   (w1 :: b)
                   (ww :: [Lib.Line a])
                   (ww1 :: [a])
                   (ww2 :: a)
                   (ww3 :: [a])
                   (ww4 :: [Lib.Line a]) ->
                 (Lib.$w$cfoldr
                    @ a
                    @ (Data.Monoid.Dual (Data.Monoid.Endo b))
                    (\ (x2 :: a)
                       (eta :: Data.Monoid.Dual (Data.Monoid.Endo b))
                       (eta1 :: b) ->
                     eta `cast` (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b>_R))
                       (w eta1 x2))
                      `cast`
                    (<a>_R
                     ->_R <Data.Monoid.Dual (Data.Monoid.Endo b)>_R
                     ->_R Sym (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b>_R)))
                    (GHC.Base.id @ b)
                      `cast`
                    (Sym (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b>_R)))
                    ww
                    ww1
                    ww2
                    ww3
                    ww4)
                   `cast`
                 (Data.Monoid.N:Dual[0] (Data.Monoid.N:Endo[0] <b>_R))
                   w1) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $wgridConfigurations ::
    [Lib.Line a]
    -> [a]
    -> a
    -> [a]
    -> [Lib.Line a]
    -> (# [Lib.Line (Lib.Grid a)], Lib.Line (Lib.Grid a),
          [Lib.Line (Lib.Grid a)] #)
  {- Arity: 5, HasNoCafRefs, Strictness: <S,U><S,U><L,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (ww :: [Lib.Line a])
                   (ww1 :: [a])
                   (ww2 :: a)
                   (ww3 :: [a])
                   (ww4 :: [Lib.Line a]) ->
                 let {
                   ds2 :: Lib.Line a = Lib.Line @ a ww1 ww2 ww3
                 } in
                 let {
                   wild :: Lib.Grid a = Lib.Grid @ a ww ds2 ww4
                 } in
                 let {
                   lvl8 :: (Lib.Grid a -> Lib.Grid a) -> Lib.Grid a
                     {- Arity: 1, Strictness: <C(S),1*C1(U(U,U,U))>,
                        Unfolding: InlineRule (1, True, True)
                                   (\ (ds3 :: Lib.Grid a -> Lib.Grid a) -> ds3 wild) -}
                   = \ (ds3 :: Lib.Grid a -> Lib.Grid a) -> ds3 wild
                 } in
                 let {
                   confs :: forall a1.
                            [a1] -> (Lib.Grid a -> Lib.Grid a) -> [Lib.Grid a]
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ @ a1 (ls :: [a1]) (f :: Lib.Grid a -> Lib.Grid a)[OneShot] ->
                     case f of f1 { DEFAULT ->
                     letrec {
                       go :: [a1]
                             -> (Lib.Grid a -> Lib.Grid a) -> [Lib.Grid a -> Lib.Grid a]
                         {- Arity: 2, Strictness: <S,1*U><L,C(U(U,U,U))> -}
                       = \ (ds3 :: [a1]) (eta :: Lib.Grid a -> Lib.Grid a) ->
                         case ds3 of wild1 {
                           [] -> GHC.Types.[] @ (Lib.Grid a -> Lib.Grid a)
                           : y ys
                           -> let {
                                b' :: Lib.Grid a -> Lib.Grid a
                                  {- Arity: 1, Strictness: <L,U>,
                                     Unfolding: InlineRule (1, True, False)
                                                (\ (x2 :: Lib.Grid a) ->
                                                 eta (case y of ds4 { DEFAULT -> f1 x2 })) -}
                                = \ (x2 :: Lib.Grid a) -> eta (case y of ds4 { DEFAULT -> f1 x2 })
                              } in
                              GHC.Types.: @ (Lib.Grid a -> Lib.Grid a) b' (go ys b') }
                     } in
                     GHC.Base.map
                       @ (Lib.Grid a -> Lib.Grid a)
                       @ (Lib.Grid a)
                       lvl8
                       (go ls (GHC.Base.id @ (Lib.Grid a))) }
                 } in
                 case confs
                        @ (Lib.Line a)
                        ww
                        (Lib.moveUpGrid @ a) of uConfs { DEFAULT ->
                 case confs
                        @ (Lib.Line a)
                        ww4
                        (Lib.moveDownGrid @ a) of dConfs { DEFAULT ->
                 case GHC.Base.map
                        @ (Lib.Grid a)
                        @ (Lib.Line (Lib.Grid a))
                        (Lib.horizontalConfigurations @ a)
                        dConfs of down { DEFAULT ->
                 case GHC.Base.map
                        @ (Lib.Grid a)
                        @ (Lib.Line (Lib.Grid a))
                        (Lib.horizontalConfigurations @ a)
                        uConfs of up { DEFAULT ->
                 case Lib.$whorizontalConfigurations
                        @ a
                        ww
                        ww1
                        ww2
                        ww3
                        ww4 of ww5 { (#,,#) ww6 ww7 ww8 ->
                 (# up, Lib.Line @ (Lib.Grid a) ww6 ww7 ww8, down #) } } } } }) -}
2988a1eaac9fe8aa29b908b484e2b72d
  $whorizontalConfigurations ::
    [Lib.Line a]
    -> [a]
    -> a
    -> [a]
    -> [Lib.Line a]
    -> (# [Lib.Grid a], Lib.Grid a, [Lib.Grid a] #)
  {- Arity: 5, HasNoCafRefs, Strictness: <S,U><S,U><L,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (ww :: [Lib.Line a])
                   (ww1 :: [a])
                   (ww2 :: a)
                   (ww3 :: [a])
                   (ww4 :: [Lib.Line a]) ->
                 let {
                   ds2 :: Lib.Line a = Lib.Line @ a ww1 ww2 ww3
                 } in
                 let {
                   wild :: Lib.Grid a = Lib.Grid @ a ww ds2 ww4
                 } in
                 let {
                   lvl8 :: (Lib.Grid a -> Lib.Grid a) -> Lib.Grid a
                     {- Arity: 1, Strictness: <C(S),1*C1(U(U,U,U))>,
                        Unfolding: InlineRule (1, True, True)
                                   (\ (ds3 :: Lib.Grid a -> Lib.Grid a) -> ds3 wild) -}
                   = \ (ds3 :: Lib.Grid a -> Lib.Grid a) -> ds3 wild
                 } in
                 let {
                   confs :: forall a1.
                            [a1] -> (Lib.Grid a -> Lib.Grid a) -> [Lib.Grid a]
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ @ a1 (ls :: [a1]) (f :: Lib.Grid a -> Lib.Grid a)[OneShot] ->
                     case f of f1 { DEFAULT ->
                     letrec {
                       go :: [a1]
                             -> (Lib.Grid a -> Lib.Grid a) -> [Lib.Grid a -> Lib.Grid a]
                         {- Arity: 2, Strictness: <S,1*U><L,C(U(U,U,U))> -}
                       = \ (ds3 :: [a1]) (eta :: Lib.Grid a -> Lib.Grid a) ->
                         case ds3 of wild1 {
                           [] -> GHC.Types.[] @ (Lib.Grid a -> Lib.Grid a)
                           : y ys
                           -> let {
                                b' :: Lib.Grid a -> Lib.Grid a
                                  {- Arity: 1, Strictness: <L,U>,
                                     Unfolding: InlineRule (1, True, False)
                                                (\ (x2 :: Lib.Grid a) ->
                                                 eta (case y of ds4 { DEFAULT -> f1 x2 })) -}
                                = \ (x2 :: Lib.Grid a) -> eta (case y of ds4 { DEFAULT -> f1 x2 })
                              } in
                              GHC.Types.: @ (Lib.Grid a -> Lib.Grid a) b' (go ys b') }
                     } in
                     GHC.Base.map
                       @ (Lib.Grid a -> Lib.Grid a)
                       @ (Lib.Grid a)
                       lvl8
                       (go ls (GHC.Base.id @ (Lib.Grid a))) }
                 } in
                 case confs @ a ww1 (Lib.moveLeftGrid @ a) of leftC { DEFAULT ->
                 case confs @ a ww3 (Lib.moveRightGrid @ a) of rightC { DEFAULT ->
                 (# leftC, wild, rightC #) } }) -}
6312a4f570908203fbf79bd26d5f43d4
  $wlowerNeighb :: [Lib.Line a] -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ @ a (ww :: [Lib.Line a]) ->
                 case ww of wild {
                   [] -> GHC.Types.[] @ a
                   : u ds2
                   -> case u of wild1 { Lib.Line ds3 x2 ds4 ->
                      case ds3 of wild2 {
                        []
                        -> case ds4 of wild3 {
                             [] -> GHC.Types.: @ a x2 (GHC.Types.[] @ a)
                             : r ds5
                             -> GHC.Types.: @ a x2 (GHC.Types.: @ a r (GHC.Types.[] @ a)) }
                        : l ds5
                        -> case ds4 of wild3 {
                             [] -> GHC.Types.: @ a l (GHC.Types.: @ a x2 (GHC.Types.[] @ a))
                             : r ds6
                             -> GHC.Types.:
                                  @ a
                                  l
                                  (GHC.Types.:
                                     @ a
                                     x2
                                     (GHC.Types.: @ a r (GHC.Types.[] @ a))) } } } }) -}
e768063011d586bab7a770e8a8a0c97f
  $wupperNeighb :: [Lib.Line a] -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ @ a (ww :: [Lib.Line a]) ->
                 case ww of wild {
                   [] -> GHC.Types.[] @ a
                   : u ds2
                   -> case u of wild1 { Lib.Line ds3 x2 ds4 ->
                      case ds3 of wild2 {
                        []
                        -> case ds4 of wild3 {
                             [] -> GHC.Types.: @ a x2 (GHC.Types.[] @ a)
                             : r ds5
                             -> GHC.Types.: @ a x2 (GHC.Types.: @ a r (GHC.Types.[] @ a)) }
                        : l ds5
                        -> case ds4 of wild3 {
                             [] -> GHC.Types.: @ a l (GHC.Types.: @ a x2 (GHC.Types.[] @ a))
                             : r ds6
                             -> GHC.Types.:
                                  @ a
                                  l
                                  (GHC.Types.:
                                     @ a
                                     x2
                                     (GHC.Types.: @ a r (GHC.Types.[] @ a))) } } } }) -}
498e7372a6b718c8873ce2a77d19dd17
  $wxs :: GHC.Prim.Int# -> (# GHC.Base.Maybe a, [GHC.Base.Maybe a] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
15d114cce075b622b670e4c3c2a242cb
  $wxs1 :: GHC.Prim.Int# -> [Lib.Line Lib.Cell]
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
40f3393710297e7ef141f39dcf030f4f
  $wxs2 :: GHC.Prim.Int# -> [Lib.Cell]
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
f8e17677233cf038d59ac4484b5ac75b
  $wxs3 :: GHC.Prim.Int# -> [Lib.Cell]
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
2c6c5b264a83af9b3415e158f0aa5fc1
  $wxs4 ::
    GHC.Prim.Int# -> (# Lib.Line Lib.Cell, [Lib.Line Lib.Cell] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
dab9aaaf81e84029abeee585dfc151a6
  $wxs5 ::
    GHC.Prim.Int# -> [Lib.Line (GHC.Base.Maybe Lib.Nucleotide)]
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
f6e371358aa2a7c813a145d8088e62e4
  $wxs6 ::
    GHC.Prim.Int#
    -> (# GHC.Base.Maybe Lib.Nucleotide,
          [GHC.Base.Maybe Lib.Nucleotide] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
2e7432f05512fd0a0fc1cabe1e0a1572
  $wxs7 ::
    GHC.Prim.Int# -> [Lib.Line (GHC.Base.Maybe Lib.Nucleotide)]
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
463a0832461734b6986e0096eed3bf84
  data Cell = Alive | Dead
0b0f5c233c5a810d791c5b09dd774e20
  data Direction = Up | Down | Left | Right
0807525a993b96a25d6470cd5bcc6919
  class Drawable a where
    draw :: a -> Graphics.Gloss.Internals.Data.Picture.Picture
    {-# MINIMAL draw #-}
2988a1eaac9fe8aa29b908b484e2b72d
  data Grid a
    = Grid {_up :: ![Lib.Line a],
            _mid :: !Lib.Line a,
            _down :: ![Lib.Line a]}
8686dbec211485f63024895e989213b5
  data Line a = Line {_left :: ![a], _center :: !a, _right :: ![a]}
c4695e7957892cc0e1032c8d4fddb0cd
  data Nucleobase = A | U | G | C
309f5641d606cd9f74b29be320fd4f58
  data Nucleotide
    = Nucleotide {_base :: !Lib.Nucleobase,
                  _bond3 :: !GHC.Base.Maybe Lib.Direction,
                  _bond5 :: !GHC.Base.Maybe Lib.Direction,
                  _hbond :: !GHC.Base.Maybe Lib.Direction}
f861290f96a24166c5e40c803e6e6f07
  _base :: Lib.Nucleotide -> Lib.Nucleobase
  RecSel Left Lib.Nucleotide
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds2 :: Lib.Nucleotide) ->
                 case ds2 of wild { Lib.Nucleotide ds3 ds4 ds5 ds6 -> ds3 }) -}
60ab979b21b2e690ada3f0a4782342e3
  _bond3 :: Lib.Nucleotide -> GHC.Base.Maybe Lib.Direction
  RecSel Left Lib.Nucleotide
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds2 :: Lib.Nucleotide) ->
                 case ds2 of wild { Lib.Nucleotide ds3 ds4 ds5 ds6 -> ds4 }) -}
461dff292a054e646a04b03444b24936
  _bond5 :: Lib.Nucleotide -> GHC.Base.Maybe Lib.Direction
  RecSel Left Lib.Nucleotide
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds2 :: Lib.Nucleotide) ->
                 case ds2 of wild { Lib.Nucleotide ds3 ds4 ds5 ds6 -> ds5 }) -}
7f68cea5cee4b681d1c7c08eae19804e
  _center :: Lib.Line a -> a
  RecSel Left Lib.Line
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds2 :: Lib.Line a) ->
                 case ds2 of wild { Lib.Line ds3 ds4 ds5 -> ds4 }) -}
3621f3bd7fb5dd1beb9968fd203eef1a
  _down :: Lib.Grid a -> [Lib.Line a]
  RecSel Left Lib.Grid
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds2 :: Lib.Grid a) ->
                 case ds2 of wild { Lib.Grid ds3 ds4 ds5 -> ds5 }) -}
87fa8a08c8fc297493cb04a0b4d79c54
  _hbond :: Lib.Nucleotide -> GHC.Base.Maybe Lib.Direction
  RecSel Left Lib.Nucleotide
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds2 :: Lib.Nucleotide) ->
                 case ds2 of wild { Lib.Nucleotide ds3 ds4 ds5 ds6 -> ds6 }) -}
e5f5abb7219e78f80dd7b3b7228da58d
  _left :: Lib.Line a -> [a]
  RecSel Left Lib.Line
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds2 :: Lib.Line a) ->
                 case ds2 of wild { Lib.Line ds3 ds4 ds5 -> ds3 }) -}
2f7c496bc825bbb2d99a19c98d1c3c0c
  _mid :: Lib.Grid a -> Lib.Line a
  RecSel Left Lib.Grid
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds2 :: Lib.Grid a) ->
                 case ds2 of wild { Lib.Grid ds3 ds4 ds5 -> ds4 }) -}
449747df36c86922b263fb32c9ff0dd2
  _right :: Lib.Line a -> [a]
  RecSel Left Lib.Line
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds2 :: Lib.Line a) ->
                 case ds2 of wild { Lib.Line ds3 ds4 ds5 -> ds5 }) -}
71ec727b293551e4c69093ec2023f191
  _up :: Lib.Grid a -> [Lib.Line a]
  RecSel Left Lib.Grid
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds2 :: Lib.Grid a) ->
                 case ds2 of wild { Lib.Grid ds3 ds4 ds5 -> ds3 }) -}
f0377f53d3550c84fa22f16502eaaa4d
  appendToLine :: Lib.Line a -> a -> Lib.Line a
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SSS),1*U(U,U,U)><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: Lib.Line a) (w1 :: a) ->
                 case w of ww { Lib.Line ww1 ww2 ww3 ->
                 case Lib.$wappendToLine
                        @ a
                        ww1
                        ww2
                        ww3
                        w1 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 Lib.Line @ a ww5 ww6 ww7 } }) -}
f6eb3952e2ab134c655da0727bc91880
  changeCent :: a -> Lib.Grid a -> Lib.Grid a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U><S(SS(SLS)S),1*U(U,U(U,A,U),U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x2 :: a) (ds2 :: Lib.Grid a) ->
                 case x2 of x3 { DEFAULT ->
                 case ds2 of wild { Lib.Grid u c d ->
                 case c of wild1 { Lib.Line l ds3 r ->
                 Lib.Grid @ a u (Lib.Line @ a l x3 r) d } } }) -}
137e4d6a6a9436e7d80607be37ff7d0a
  changeMid :: a -> Lib.Line a -> Lib.Line a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S(SLS),1*U(U,A,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (i :: a) (ds2 :: Lib.Line a) ->
                 case i of i1 { DEFAULT ->
                 case ds2 of wild { Lib.Line l ds3 r -> Lib.Line @ a l i1 r } }) -}
c6c7eefbab12a8a6a7d8567c83bdd3a5
  conwayUpdate :: Lib.Grid Lib.Cell -> Lib.Cell
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS(LSL)S),1*U(U,U(U,U,U),U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Lib.Grid Lib.Cell) ->
                 case w of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 Lib.$wconwayUpdate ww1 ww5 ww6 ww7 ww3 } }) -}
827850c67242685b7e2f0d7db5c4c5af
  counts :: GHC.Classes.Eq a => a -> [a] -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(U),A)><L,U>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) (eta :: a) ->
                 let {
                   g :: a -> GHC.Types.Bool = GHC.Classes.== @ a $dEq eta
                 } in
                 letrec {
                   $wgo1 :: [a] -> GHC.Prim.Int# -> GHC.Prim.Int#
                     {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
                   = \ (w :: [a]) (ww :: GHC.Prim.Int#) ->
                     case w of wild {
                       [] -> ww
                       : y ys
                       -> case g y of wild1 {
                            GHC.Types.False -> $wgo1 ys ww
                            GHC.Types.True -> $wgo1 ys (GHC.Prim.+# ww 1#) } }
                 } in
                 \ (x2 :: [a]) ->
                 case $wgo1 x2 0# of ww { DEFAULT -> GHC.Types.I# ww }) -}
aadb2e70f592e5d819e8898220749c74
  emptyNLine :: Lib.Line (GHC.Base.Maybe a)
  {- Unfolding: (\ @ a ->
                 case Lib.$wxs @ a 10# of ww { (#,#) ww1 ww2 ->
                 case Lib.emptyNLine1 @ a 8# of dt { DEFAULT ->
                 Lib.Line
                   @ (GHC.Base.Maybe a)
                   (GHC.Types.: @ (GHC.Base.Maybe a) ww1 ww2)
                   (GHC.Base.Nothing @ a)
                   dt } }) -}
2cb5774875f1fd5fe25745567eb48a0a
  emptyNLine1 :: GHC.Prim.Int# -> [GHC.Base.Maybe a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
2988a1eaac9fe8aa29b908b484e2b72d
  gridConfigurations :: Lib.Grid a -> Lib.Grid (Lib.Grid a)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS(SLS)S),1*U(U,U(U,U,U),U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Lib.Grid a) ->
                 case w of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 case Lib.$wgridConfigurations
                        @ a
                        ww1
                        ww5
                        ww6
                        ww7
                        ww3 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 Lib.Grid @ (Lib.Grid a) ww9 ww10 ww11 } } }) -}
f341362e566d1dd847f727e5d81ff3c1
  height :: Lib.Grid a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLS),1*U(U,A,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Lib.Grid a) ->
                 case w of ww { Lib.Grid ww1 ww2 ww3 ->
                 case GHC.List.$wlenAcc @ (Lib.Line a) ww1 0# of ww4 { DEFAULT ->
                 case GHC.List.$wlenAcc @ (Lib.Line a) ww3 0# of ww5 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.+# (GHC.Prim.+# ww4 ww5) 1#) } } }) -}
7bd802d39ff6ccfd74241c4a9bf5876a
  horizNeighb :: Lib.Grid a -> [a]
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LS(SLS)L),1*U(A,U(U,A,U),A)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Lib.Grid a) ->
                 case w of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 case ww5 of wild {
                   []
                   -> case ww7 of wild1 {
                        [] -> GHC.Types.[] @ a
                        : b ds2 -> GHC.Types.: @ a b (GHC.Types.[] @ a) }
                   : a1 ds2
                   -> case ww7 of wild1 {
                        [] -> GHC.Types.: @ a a1 (GHC.Types.[] @ a)
                        : b ds3
                        -> GHC.Types.:
                             @ a
                             a1
                             (GHC.Types.: @ a b (GHC.Types.[] @ a)) } } } }) -}
2988a1eaac9fe8aa29b908b484e2b72d
  horizontalConfigurations :: Lib.Grid a -> Lib.Line (Lib.Grid a)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS(SLS)S),1*U(U,U(U,U,U),U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Lib.Grid a) ->
                 case w of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 case Lib.$whorizontalConfigurations
                        @ a
                        ww1
                        ww5
                        ww6
                        ww7
                        ww3 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 Lib.Line @ (Lib.Grid a) ww9 ww10 ww11 } } }) -}
bbd8966d4bdfa852c113ff481a55c4e0
  limap :: (Lib.Line a -> Lib.Line a) -> Lib.Grid a -> Lib.Grid a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S(SSS),1*U(U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: Lib.Line a -> Lib.Line a) (w1 :: Lib.Grid a) ->
                 case w1 of ww { Lib.Grid ww1 ww2 ww3 ->
                 case GHC.Base.map
                        @ (Lib.Line a)
                        @ (Lib.Line a)
                        w
                        ww1 of dt { DEFAULT ->
                 case w ww2 of dt1 { Lib.Line ipv ipv1 ipv2 ->
                 case GHC.Base.map
                        @ (Lib.Line a)
                        @ (Lib.Line a)
                        w
                        ww3 of dt2 { DEFAULT ->
                 Lib.Grid @ a dt dt1 dt2 } } } }) -}
c09819ecf6cb5b7353d4fc71bae503c0
  lowerNeighb :: Lib.Grid a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Lib.Grid a) ->
                 case w of ww { Lib.Grid ww1 ww2 ww3 ->
                 Lib.$wlowerNeighb @ a ww3 }) -}
03052cb847a799e5dcb058a4f64dbfcc
  mooresNeighb :: Lib.Grid a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SSS),1*U(U,U(U,A,U),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Lib.Grid a) ->
                 case w of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 let {
                   karg :: [a]
                   = let {
                       karg1 :: [a]
                       = case ww5 of wild {
                           []
                           -> case ww7 of wild1 {
                                [] -> GHC.Types.[] @ a
                                : b ds2 -> GHC.Types.: @ a b (GHC.Types.[] @ a) }
                           : a1 ds2
                           -> case ww7 of wild1 {
                                [] -> GHC.Types.: @ a a1 (GHC.Types.[] @ a)
                                : b ds3
                                -> GHC.Types.: @ a a1 (GHC.Types.: @ a b (GHC.Types.[] @ a)) } }
                     } in
                     case ww3 of wild {
                       [] -> GHC.Base.++ @ a (GHC.Types.[] @ a) karg1
                       : u ds2
                       -> case u of wild1 { Lib.Line ds3 x2 ds4 ->
                          case ds3 of wild2 {
                            []
                            -> case ds4 of wild3 {
                                 [] -> GHC.Base.++ @ a (GHC.Types.: @ a x2 (GHC.Types.[] @ a)) karg1
                                 : r ds5
                                 -> GHC.Base.++
                                      @ a
                                      (GHC.Types.: @ a x2 (GHC.Types.: @ a r (GHC.Types.[] @ a)))
                                      karg1 }
                            : l ds5
                            -> case ds4 of wild3 {
                                 []
                                 -> GHC.Base.++
                                      @ a
                                      (GHC.Types.: @ a l (GHC.Types.: @ a x2 (GHC.Types.[] @ a)))
                                      karg1
                                 : r ds6
                                 -> GHC.Base.++
                                      @ a
                                      (GHC.Types.:
                                         @ a
                                         l
                                         (GHC.Types.:
                                            @ a
                                            x2
                                            (GHC.Types.: @ a r (GHC.Types.[] @ a))))
                                      karg1 } } } }
                 } in
                 case ww1 of wild {
                   [] -> GHC.Base.++ @ a (GHC.Types.[] @ a) karg
                   : u ds2
                   -> case u of wild1 { Lib.Line ds3 x2 ds4 ->
                      case ds3 of wild2 {
                        []
                        -> case ds4 of wild3 {
                             [] -> GHC.Base.++ @ a (GHC.Types.: @ a x2 (GHC.Types.[] @ a)) karg
                             : r ds5
                             -> GHC.Base.++
                                  @ a
                                  (GHC.Types.: @ a x2 (GHC.Types.: @ a r (GHC.Types.[] @ a)))
                                  karg }
                        : l ds5
                        -> case ds4 of wild3 {
                             []
                             -> GHC.Base.++
                                  @ a
                                  (GHC.Types.: @ a l (GHC.Types.: @ a x2 (GHC.Types.[] @ a)))
                                  karg
                             : r ds6
                             -> GHC.Base.++
                                  @ a
                                  (GHC.Types.:
                                     @ a
                                     l
                                     (GHC.Types.: @ a x2 (GHC.Types.: @ a r (GHC.Types.[] @ a))))
                                  karg } } } } } }) -}
2988a1eaac9fe8aa29b908b484e2b72d
  moveDownGrid :: Lib.Grid a -> Lib.Grid a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SSS),1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds2 :: Lib.Grid a) ->
                 case ds2 of wild { Lib.Grid up x2 ds3 ->
                 case ds3 of wild1 {
                   [] -> wild
                   : y down
                   -> case y of dt { Lib.Line ipv ipv1 ipv2 ->
                      case down of dt1 { DEFAULT ->
                      Lib.Grid @ a (GHC.Types.: @ (Lib.Line a) x2 up) dt dt1 } } } }) -}
2988a1eaac9fe8aa29b908b484e2b72d
  moveLeftGrid :: Lib.Grid a -> Lib.Grid a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS(SSS)S),1*U(U,U(U,U,U),U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Lib.Grid a) ->
                 case w of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 case GHC.Base.map
                        @ (Lib.Line a)
                        @ (Lib.Line a)
                        (Lib.moveLeftLine @ a)
                        ww1 of dt { DEFAULT ->
                 case case ww5 of wild {
                        [] -> Lib.Line @ a (GHC.Types.[] @ a) ww6 ww7
                        : l left
                        -> Lib.Line
                             @ a
                             left
                             l
                             (GHC.Types.: @ a ww6 ww7) } of dt1 { Lib.Line ipv ipv1 ipv2 ->
                 case GHC.Base.map
                        @ (Lib.Line a)
                        @ (Lib.Line a)
                        (Lib.moveLeftLine @ a)
                        ww3 of dt2 { DEFAULT ->
                 Lib.Grid @ a dt dt1 dt2 } } } } }) -}
502dad00d6002df212a7356423d9f733
  moveLeftLine :: Lib.Line a -> Lib.Line a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SSS),1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds2 :: Lib.Line a) ->
                 case ds2 of wild { Lib.Line ds3 x2 right ->
                 case ds3 of wild1 {
                   [] -> wild
                   : l left
                   -> case left of dt { DEFAULT ->
                      case l of dt1 { DEFAULT ->
                      Lib.Line @ a dt dt1 (GHC.Types.: @ a x2 right) } } } }) -}
2988a1eaac9fe8aa29b908b484e2b72d
  moveRightGrid :: Lib.Grid a -> Lib.Grid a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS(SSS)S),1*U(U,U(U,U,U),U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Lib.Grid a) ->
                 case w of ww { Lib.Grid ww1 ww2 ww3 ->
                 case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                 case GHC.Base.map
                        @ (Lib.Line a)
                        @ (Lib.Line a)
                        (Lib.moveRightLine @ a)
                        ww1 of dt { DEFAULT ->
                 case case ww7 of wild {
                        [] -> Lib.Line @ a ww5 ww6 (GHC.Types.[] @ a)
                        : r right
                        -> Lib.Line
                             @ a
                             (GHC.Types.: @ a ww6 ww5)
                             r
                             right } of dt1 { Lib.Line ipv ipv1 ipv2 ->
                 case GHC.Base.map
                        @ (Lib.Line a)
                        @ (Lib.Line a)
                        (Lib.moveRightLine @ a)
                        ww3 of dt2 { DEFAULT ->
                 Lib.Grid @ a dt dt1 dt2 } } } } }) -}
f14d4235514944e2eb4bbf71b3ce32eb
  moveRightLine :: Lib.Line a -> Lib.Line a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SSS),1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds2 :: Lib.Line a) ->
                 case ds2 of wild { Lib.Line left x2 ds3 ->
                 case ds3 of wild1 {
                   [] -> wild
                   : r right
                   -> case r of dt { DEFAULT ->
                      case right of dt1 { DEFAULT ->
                      Lib.Line @ a (GHC.Types.: @ a x2 left) dt dt1 } } } }) -}
2988a1eaac9fe8aa29b908b484e2b72d
  moveUpGrid :: Lib.Grid a -> Lib.Grid a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SSS),1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds2 :: Lib.Grid a) ->
                 case ds2 of wild { Lib.Grid ds3 x2 down ->
                 case ds3 of wild1 {
                   [] -> wild
                   : y up
                   -> case up of dt { DEFAULT ->
                      case y of dt1 { Lib.Line ipv ipv1 ipv2 ->
                      Lib.Grid
                        @ a
                        dt
                        dt1
                        (GHC.Types.: @ (Lib.Line a) x2 down) } } } }) -}
590ec659dc33d5a079eb49f9142c8fb3
  sampleGrid :: Lib.Grid Lib.Cell
  {- Unfolding: (case Lib.$wxs4 37# of ww { (#,#) ww1 ww2 ->
                 case Lib.sampleLine of dt { Lib.Line ipv ipv1 ipv2 ->
                 case Lib.$wxs1 37# of dt1 { DEFAULT ->
                 Lib.Grid
                   @ Lib.Cell
                   (GHC.Types.: @ (Lib.Line Lib.Cell) ww1 ww2)
                   (Lib.Line @ Lib.Cell ipv Lib.Dead ipv2)
                   dt1 } } }) -}
7b67863aae8b864011fe89cbdce770d9
  sampleLine :: Lib.Line Lib.Cell
  {- Unfolding: (case Lib.$wxs3 34# of dt { DEFAULT ->
                 case Lib.$wxs2 34# of dt1 { DEFAULT ->
                 Lib.Line @ Lib.Cell dt Lib.Dead dt1 } }) -}
f7b1ae80acba380a32227111495ccb0c
  sampleNGrid :: Lib.Grid (GHC.Base.Maybe Lib.Nucleotide)
  {- Unfolding: (case Lib.sampleNLine of dt { Lib.Line ipv ipv1 ipv2 ->
                 Lib.Grid
                   @ (GHC.Base.Maybe Lib.Nucleotide)
                   Lib.sampleNGrid3
                   dt
                   Lib.sampleNGrid1 }) -}
59ce427aa5862088c0305ea5f25871b7
  sampleNGrid1 :: [Lib.Line (GHC.Base.Maybe Lib.Nucleotide)]
  {- Unfolding: (GHC.Types.:
                   @ (Lib.Line (GHC.Base.Maybe Lib.Nucleotide))
                   Lib.sampleNLine
                   Lib.sampleNGrid2) -}
37f8dac31890189adddc1b424d0b327c
  sampleNGrid2 :: [Lib.Line (GHC.Base.Maybe Lib.Nucleotide)]
  {- Unfolding: (Lib.$wxs5 7#) -}
e02f8b3fdd061f39cbd8e521245039f9
  sampleNGrid3 :: [Lib.Line (GHC.Base.Maybe Lib.Nucleotide)]
  {- Unfolding: (GHC.Types.:
                   @ (Lib.Line (GHC.Base.Maybe Lib.Nucleotide))
                   Lib.sampleNLine
                   Lib.sampleNGrid4) -}
ca63a941684f3f0077ce74d36972474f
  sampleNGrid4 :: [Lib.Line (GHC.Base.Maybe Lib.Nucleotide)]
  {- Unfolding: (Lib.$wxs7 10#) -}
5cd9949f38dc1c5fa6b56595e43948d7
  sampleNLine :: Lib.Line (GHC.Base.Maybe Lib.Nucleotide)
  {- Unfolding: (case Lib.$wxs6 10# of ww { (#,#) ww1 ww2 ->
                 Lib.Line
                   @ (GHC.Base.Maybe Lib.Nucleotide)
                   (GHC.Types.: @ (GHC.Base.Maybe Lib.Nucleotide) ww1 ww2)
                   (GHC.Base.Nothing @ Lib.Nucleotide)
                   Lib.sampleNLine1 }) -}
2c4e40c5a8d1119e29a2d7143eec665e
  sampleNLine1 :: [GHC.Base.Maybe Lib.Nucleotide]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe Lib.Nucleotide)
                   Lib.sampleNLine21
                   Lib.sampleNLine2) -}
6d511e4e8d530cf20e574594c4cd4e53
  sampleNLine10 :: Lib.Nucleotide
  {- HasNoCafRefs,
     Unfolding: (Lib.Nucleotide
                   Lib.G
                   (GHC.Base.Nothing @ Lib.Direction)
                   Lib.sampleNLine11
                   (GHC.Base.Nothing @ Lib.Direction)) -}
7b92188c7cac76a72f7d496a583c2d23
  sampleNLine11 :: GHC.Base.Maybe Lib.Direction
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ Lib.Direction Lib.Left) -}
9beb25d53bbf12820cc7b0abcba7264f
  sampleNLine12 :: GHC.Base.Maybe Lib.Nucleotide
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just @ Lib.Nucleotide Lib.sampleNLine13) -}
ef04d59cd4c739c89b202888ada0635a
  sampleNLine13 :: Lib.Nucleotide
  {- HasNoCafRefs,
     Unfolding: (Lib.Nucleotide
                   Lib.G
                   Lib.sampleNLine14
                   Lib.sampleNLine11
                   (GHC.Base.Nothing @ Lib.Direction)) -}
210701ef0ac3db2d4c6974b697a561f7
  sampleNLine14 :: GHC.Base.Maybe Lib.Direction
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ Lib.Direction Lib.Right) -}
bc448bb2b63327e46a4ca90051f041e3
  sampleNLine15 :: GHC.Base.Maybe Lib.Nucleotide
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just @ Lib.Nucleotide Lib.sampleNLine16) -}
f70c43e5b4b14a1a837e3d8981a070fe
  sampleNLine16 :: Lib.Nucleotide
  {- HasNoCafRefs,
     Unfolding: (Lib.Nucleotide
                   Lib.C
                   Lib.sampleNLine14
                   Lib.sampleNLine11
                   (GHC.Base.Nothing @ Lib.Direction)) -}
ed7b8a2ca66c00f0dd4151b06f17b345
  sampleNLine17 :: GHC.Base.Maybe Lib.Nucleotide
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just @ Lib.Nucleotide Lib.sampleNLine18) -}
36ccef8d2362296209bdea67e93e8c68
  sampleNLine18 :: Lib.Nucleotide
  {- HasNoCafRefs,
     Unfolding: (Lib.Nucleotide
                   Lib.U
                   Lib.sampleNLine14
                   Lib.sampleNLine11
                   (GHC.Base.Nothing @ Lib.Direction)) -}
a2086243c6a1c54a4e532936de7cbbae
  sampleNLine19 :: GHC.Base.Maybe Lib.Nucleotide
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just @ Lib.Nucleotide Lib.sampleNLine20) -}
6a2e2489e7dcba3ee5db28f6c12f3123
  sampleNLine2 :: [GHC.Base.Maybe Lib.Nucleotide]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe Lib.Nucleotide)
                   Lib.sampleNLine19
                   Lib.sampleNLine3) -}
18c8dc3593c44224437ce0a8b69484ee
  sampleNLine20 :: Lib.Nucleotide
  {- HasNoCafRefs,
     Unfolding: (Lib.Nucleotide
                   Lib.A
                   Lib.sampleNLine14
                   Lib.sampleNLine11
                   (GHC.Base.Nothing @ Lib.Direction)) -}
1964bf772aeb4673f48cb7b7390763e3
  sampleNLine21 :: GHC.Base.Maybe Lib.Nucleotide
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just @ Lib.Nucleotide Lib.sampleNLine22) -}
e9a3553eec6f5b88d991761c604d9fdb
  sampleNLine22 :: Lib.Nucleotide
  {- HasNoCafRefs,
     Unfolding: (Lib.Nucleotide
                   Lib.G
                   Lib.sampleNLine14
                   (GHC.Base.Nothing @ Lib.Direction)
                   (GHC.Base.Nothing @ Lib.Direction)) -}
de2bfccc6225f468129d66d4bb702c81
  sampleNLine3 :: [GHC.Base.Maybe Lib.Nucleotide]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe Lib.Nucleotide)
                   Lib.sampleNLine15
                   Lib.sampleNLine4) -}
464497ce3fc878d15e15a73a90089f88
  sampleNLine4 :: [GHC.Base.Maybe Lib.Nucleotide]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe Lib.Nucleotide)
                   Lib.sampleNLine19
                   Lib.sampleNLine5) -}
72a090079da45d2ad39aaed827151eb6
  sampleNLine5 :: [GHC.Base.Maybe Lib.Nucleotide]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe Lib.Nucleotide)
                   Lib.sampleNLine17
                   Lib.sampleNLine6) -}
d9a459807eeebf340ed3973c9885f2b5
  sampleNLine6 :: [GHC.Base.Maybe Lib.Nucleotide]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe Lib.Nucleotide)
                   Lib.sampleNLine15
                   Lib.sampleNLine7) -}
dc9d5b4079e79b250f51b7c185e6981a
  sampleNLine7 :: [GHC.Base.Maybe Lib.Nucleotide]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe Lib.Nucleotide)
                   Lib.sampleNLine12
                   Lib.sampleNLine8) -}
6e09a3c411d330033be3e8a7ca3de602
  sampleNLine8 :: [GHC.Base.Maybe Lib.Nucleotide]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe Lib.Nucleotide)
                   Lib.sampleNLine9
                   (GHC.Types.[] @ (GHC.Base.Maybe Lib.Nucleotide))) -}
e46c81c6b204a044bd7a49fea884a448
  sampleNLine9 :: GHC.Base.Maybe Lib.Nucleotide
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just @ Lib.Nucleotide Lib.sampleNLine10) -}
d321d16109d877e3d2cdd65cefd90235
  simulationGOF :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.simulationGOF1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
ea4c060fc9421b5b82ff6c6f776af966
  simulationGOF1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case Graphics.Gloss.Internals.Interface.Simulate.simulateWithBackendIO1
                        @ (Lib.Grid Lib.Cell)
                        @ Graphics.Gloss.Internals.Interface.Backend.GLUT.GLUTState
                        Graphics.Gloss.Internals.Interface.Backend.GLUT.$fBackendGLUTState
                        Graphics.Gloss.Internals.Interface.Backend.GLUT.$fBackendGLUTState_$cinitBackendState
                        Lib.simulationGOF5
                        Graphics.Gloss.Data.Color.white
                        Lib.simulationGOF4
                        Lib.sampleGrid
                        Lib.simulationGOF3
                          `cast`
                        (<Lib.Grid Lib.Cell>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Graphics.Gloss.Internals.Data.Picture.Picture>_R))
                        Lib.simulationGOF2
                          `cast`
                        (<Graphics.Gloss.Data.ViewPort.ViewPort>_R
                         ->_R <GHC.Types.Float>_R
                         ->_R <Lib.Grid Lib.Cell>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Lib.Grid Lib.Cell>_R))
                        eta of ds2 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
6898ed90e75bb64edfc0964f711a1d60
  simulationGOF10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Conway"#) -}
741fe8c1a9fb462acb15693ba847ce10
  simulationGOF2 ::
    Graphics.Gloss.Data.ViewPort.ViewPort
    -> GHC.Types.Float
    -> Lib.Grid Lib.Cell
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Lib.Grid Lib.Cell #)
  {- Arity: 4, HasNoCafRefs,
     Unfolding: (\ (view :: Graphics.Gloss.Data.ViewPort.ViewPort)
                   (time :: GHC.Types.Float)[OneShot]
                   (model1 :: Lib.Grid Lib.Cell)[OneShot]
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s,
                    case view of ds2 { Graphics.Gloss.Data.ViewPort.ViewPort ipv ipv1 ipv2 ->
                    case time of ds3 { GHC.Types.F# ipv3 ->
                    case model1 of ww { Lib.Grid ww1 ww2 ww3 ->
                    case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                    case Lib.$wgridConfigurations
                           @ Lib.Cell
                           ww1
                           ww5
                           ww6
                           ww7
                           ww3 of ww8 { (#,,#) ww9 ww10 ww11 ->
                    case ww10 of ww12 { Lib.Line ww13 ww14 ww15 ->
                    case Lib.$w$cfmap
                           @ (Lib.Grid Lib.Cell)
                           @ Lib.Cell
                           Lib.conwayUpdate
                           ww9
                           ww13
                           ww14
                           ww15
                           ww11 of ww16 { (#,,#) ww17 ww18 ww19 ->
                    Lib.Grid @ Lib.Cell ww17 ww18 ww19 } } } } } } } #)) -}
9bbb09ce6d8bca71eaf74f350121c3b9
  simulationGOF3 ::
    Lib.Grid Lib.Cell
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Graphics.Gloss.Internals.Data.Picture.Picture #)
  {- Arity: 2,
     Unfolding: (\ (x2 :: Lib.Grid Lib.Cell)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s,
                    case x2 of ww { Lib.Grid ww1 ww2 ww3 ->
                    case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                    case Lib.$wds
                           @ Lib.Cell
                           Lib.$fDrawableCell_$cdraw
                             `cast`
                           (Sym (Lib.N:Drawable[0] <Lib.Cell>_N))
                           ww1
                           ww5
                           ww6
                           ww7
                           ww3 of ww8 { Unit# ww9 ->
                    Graphics.Gloss.Internals.Data.Picture.Pictures ww9 } } } #)) -}
e7e398636a0683974b212046a9b3c7d5
  simulationGOF4 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 3#) -}
c24dc109ffc6916221f2ed96999412d1
  simulationGOF5 :: Graphics.Gloss.Data.Display.Display
  {- Unfolding: (Graphics.Gloss.Data.Display.InWindow
                   Lib.simulationGOF10
                   Lib.simulationGOF7
                   Lib.simulationGOF6) -}
47a31acef93fc4cd0cfdba37819f4c24
  simulationGOF6 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs,
     Unfolding: ((Lib.$fFoldableGrid11, Lib.$fFoldableGrid11)) -}
a254a8269d3d6e427920fa8ee1aa084c
  simulationGOF7 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs,
     Unfolding: ((Lib.simulationGOF9, Lib.simulationGOF8)) -}
39763162e1f758a61b71190df78dd106
  simulationGOF8 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 768#) -}
4810b8d766003fe70dc1ecd962c3043f
  simulationGOF9 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 1366#) -}
74de3da3b24775d6b6a33fe64cec50ec
  simulationN :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.simulationN1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
20085195b202d8e661cc790ac12d4c1b
  simulationN1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case Graphics.Gloss.Internals.Interface.Simulate.simulateWithBackendIO1
                        @ (Lib.Grid (GHC.Base.Maybe Lib.Nucleotide))
                        @ Graphics.Gloss.Internals.Interface.Backend.GLUT.GLUTState
                        Graphics.Gloss.Internals.Interface.Backend.GLUT.$fBackendGLUTState
                        Graphics.Gloss.Internals.Interface.Backend.GLUT.$fBackendGLUTState_$cinitBackendState
                        Lib.simulationGOF5
                        Graphics.Gloss.Data.Color.white
                        Lib.simulationGOF4
                        Lib.sampleNGrid
                        Lib.simulationN3
                          `cast`
                        (<Lib.Grid (GHC.Base.Maybe Lib.Nucleotide)>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Graphics.Gloss.Internals.Data.Picture.Picture>_R))
                        Lib.simulationN2
                          `cast`
                        (<Graphics.Gloss.Data.ViewPort.ViewPort>_R
                         ->_R <GHC.Types.Float>_R
                         ->_R <Lib.Grid (GHC.Base.Maybe Lib.Nucleotide)>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Lib.Grid (GHC.Base.Maybe Lib.Nucleotide)>_R))
                        eta of ds2 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
84ef3122d156a11b0425e5c1685fb5f6
  simulationN2 ::
    Graphics.Gloss.Data.ViewPort.ViewPort
    -> GHC.Types.Float
    -> Lib.Grid (GHC.Base.Maybe Lib.Nucleotide)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Lib.Grid (GHC.Base.Maybe Lib.Nucleotide) #)
  {- Arity: 4, HasNoCafRefs,
     Unfolding: (\ (view :: Graphics.Gloss.Data.ViewPort.ViewPort)
                   (time :: GHC.Types.Float)[OneShot]
                   (model1 :: Lib.Grid (GHC.Base.Maybe Lib.Nucleotide))[OneShot]
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s,
                    case view of ds2 { Graphics.Gloss.Data.ViewPort.ViewPort ipv ipv1 ipv2 ->
                    case time of ds3 { GHC.Types.F# ipv3 -> model1 } } #)) -}
b2363c1e005c3f5ceda65a72ce4d42e8
  simulationN3 ::
    Lib.Grid (GHC.Base.Maybe Lib.Nucleotide)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Graphics.Gloss.Internals.Data.Picture.Picture #)
  {- Arity: 2,
     Unfolding: (\ (x2 :: Lib.Grid (GHC.Base.Maybe Lib.Nucleotide))
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s,
                    case x2 of ww { Lib.Grid ww1 ww2 ww3 ->
                    case ww2 of ww4 { Lib.Line ww5 ww6 ww7 ->
                    case Lib.$wds
                           @ (GHC.Base.Maybe Lib.Nucleotide)
                           Lib.$sdraw4
                             `cast`
                           (Sym (Lib.N:Drawable[0] <GHC.Base.Maybe Lib.Nucleotide>_N))
                           ww1
                           ww5
                           ww6
                           ww7
                           ww3 of ww8 { Unit# ww9 ->
                    Graphics.Gloss.Internals.Data.Picture.Pictures ww9 } } } #)) -}
00c22fcd8fe9118b40b3f5371a1d5fab
  someFunc :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.someFunc1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
ad6a9625975a1a79cc821c5af4569cd9
  someFunc1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Lib.someFunc2
                   GHC.Types.True
                   eta) -}
2c8e587a0b56019abf877c287f94cfeb
  someFunc2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "someFunc"#) -}
8644155be2858de94082f3f4213f9c70
  upperNeighb :: Lib.Grid a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(U,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Lib.Grid a) ->
                 case w of ww { Lib.Grid ww1 ww2 ww3 ->
                 Lib.$wupperNeighb @ a ww1 }) -}
75ce44d3e2738f1c130343bf6779f860
  width :: Lib.Grid a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LS(SSS)L),1*U(A,U(U,U,U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds2 :: Lib.Grid a) ->
                 case ds2 of wild { Lib.Grid ds3 x2 ds4 ->
                 Lib.$fFoldableLine8 @ a x2 }) -}
instance Control.Comonad.Comonad [Lib.Grid] = Lib.$fComonadGrid
instance Lib.Drawable [Lib.Cell] = Lib.$fDrawableCell
instance Lib.Drawable [Lib.Grid] = Lib.$fDrawableGrid
instance Lib.Drawable [Lib.Line] = Lib.$fDrawableLine
instance Lib.Drawable [GHC.Base.Maybe] = Lib.$fDrawableMaybe
instance Lib.Drawable [Lib.Nucleobase] = Lib.$fDrawableNucleobase
instance Lib.Drawable [Lib.Nucleotide] = Lib.$fDrawableNucleotide
instance GHC.Classes.Eq [Lib.Cell] = Lib.$fEqCell
instance Data.Foldable.Foldable [Lib.Grid] = Lib.$fFoldableGrid
instance Data.Foldable.Foldable [Lib.Line] = Lib.$fFoldableLine
instance GHC.Base.Functor [Lib.Grid] = Lib.$fFunctorGrid
instance GHC.Base.Functor [Lib.Line] = Lib.$fFunctorLine
instance GHC.Show.Show [Lib.Cell] = Lib.$fShowCell
instance GHC.Show.Show [Lib.Grid] = Lib.$fShowGrid
instance GHC.Show.Show [Lib.Line] = Lib.$fShowLine
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

